Index: app/src/main/java/com/example/workoutapp/FirebaseRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.workoutapp;\r\n\r\nimport android.app.Application;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.lifecycle.MutableLiveData;\r\n\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.OnFailureListener;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.android.material.snackbar.Snackbar;\r\nimport com.google.firebase.auth.AuthResult;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.database.ChildEventListener;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Locale;\r\nimport java.util.Objects;\r\nimport java.util.Calendar;\r\nimport java.text.DateFormat;\r\n\r\nimport static java.lang.Double.isNaN;\r\n\r\npublic class FirebaseRepository {\r\n\r\n    private Application application;\r\n    private FirebaseAuth firebaseAuth;\r\n    private FirebaseUser firebaseUser;\r\n    private DatabaseReference database;\r\n    private MutableLiveData<FirebaseUser> userMutableLiveData;\r\n    private MutableLiveData<FirebaseUser> registerUserLiveData;\r\n    private MutableLiveData<Integer> dailyPoints;\r\n    private MutableLiveData<Integer> weeklyPoints;\r\n    private MutableLiveData<Integer> lifetimePoints;\r\n    private MutableLiveData<Integer> mutableWeight;\r\n    private MutableLiveData<Integer> mutableHeight;\r\n    private MutableLiveData<Integer> mutableNeckSize;\r\n    private MutableLiveData<Integer> mutableWaistSize;\r\n    private MutableLiveData<Integer> mutableHipSize;\r\n    public MutableLiveData<Double> mutableBodyFat;\r\n    public MutableLiveData<String> mutableGender;\r\n    private MutableLiveData<String> mutableBirthday;\r\n    private MutableLiveData<ArrayList<Friend>> friends;\r\n    private Calendar calendar;\r\n    private SimpleDateFormat sdf;\r\n    private String dateString;\r\n    private ArrayList<Friend> friendsArray;\r\n\r\n    public FirebaseRepository(Application application){\r\n        friendsArray = new ArrayList<>();\r\n        calendar = Calendar.getInstance();\r\n        sdf = new SimpleDateFormat(\"MM-dd-yyyy\", Locale.US);\r\n        dateString = sdf.format(calendar.getTime());\r\n        this.application = application;\r\n        firebaseAuth = FirebaseAuth.getInstance();\r\n        database = FirebaseDatabase.getInstance().getReference();\r\n        userMutableLiveData = new MutableLiveData<>();\r\n        registerUserLiveData = new MutableLiveData<>();\r\n        dailyPoints = new MutableLiveData<>();\r\n        weeklyPoints = new MutableLiveData<>();\r\n        lifetimePoints = new MutableLiveData<>();\r\n        mutableWeight = new MutableLiveData<>();\r\n        mutableHeight = new MutableLiveData<>();\r\n        mutableNeckSize = new MutableLiveData<>();\r\n        mutableWaistSize = new MutableLiveData<>();\r\n        mutableHipSize = new MutableLiveData<>();\r\n        mutableGender = new MutableLiveData<>();\r\n        mutableBirthday = new MutableLiveData<>();\r\n        mutableBodyFat = new MutableLiveData<>();\r\n        friends = new MutableLiveData<>(friendsArray);\r\n    }\r\n\r\n    public MutableLiveData<FirebaseUser> getUserMutableLiveData() {\r\n        return userMutableLiveData;\r\n    }\r\n\r\n    public MutableLiveData<FirebaseUser> getRegisterUserLiveData() {\r\n        return registerUserLiveData;\r\n    }\r\n\r\n    public MutableLiveData<String> getMutableGender(){\r\n        return mutableGender;\r\n    }\r\n\r\n    public MutableLiveData<Integer> getDailyPoints() {\r\n        return dailyPoints;\r\n    }\r\n\r\n    public MutableLiveData<Integer> getWeeklyPoints() {\r\n        return weeklyPoints;\r\n    }\r\n\r\n    public MutableLiveData<Integer> getLifetimePoints() {\r\n        return lifetimePoints;\r\n    }\r\n\r\n    public MutableLiveData<Integer> getMutableWeight() {\r\n        return mutableWeight;\r\n    }\r\n\r\n    public MutableLiveData<Integer> getMutableHeight() {\r\n        return mutableHeight;\r\n    }\r\n\r\n    public MutableLiveData<Integer> getMutableNeckSize() {\r\n        return mutableNeckSize;\r\n    }\r\n\r\n    public MutableLiveData<Integer> getMutableWaistSize() {\r\n        return mutableWaistSize;\r\n    }\r\n\r\n    public MutableLiveData<Integer> getMutableHipSize() {\r\n        return mutableHipSize;\r\n    }\r\n\r\n    public MutableLiveData<Double> getMutableBodyFat() {\r\n        return mutableBodyFat;\r\n    }\r\n\r\n    public MutableLiveData<String> getMutableBirthday() {\r\n        return mutableBirthday;\r\n    }\r\n\r\n    public MutableLiveData<ArrayList<Friend>> getFriends() {\r\n        return friends;\r\n    }\r\n\r\n    public void initCurrentUser(){\r\n        userMutableLiveData.setValue(firebaseAuth.getCurrentUser());\r\n    }\r\n\r\n    public void register(String email, String password){ //for registering a new account only\r\n        firebaseAuth.createUserWithEmailAndPassword(email, password).addOnCompleteListener(application.getMainExecutor(), new OnCompleteListener<AuthResult>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<AuthResult> task) { //new account created\r\n                registerUserLiveData.setValue(firebaseAuth.getCurrentUser());\r\n                initPoints();\r\n            }\r\n        });\r\n    }\r\n\r\n    public void signIn(final String username, final String password){\r\n        firebaseAuth.signInWithEmailAndPassword(username, password).addOnCompleteListener(application.getMainExecutor(), new OnCompleteListener<AuthResult>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<AuthResult> task) {\r\n                userMutableLiveData.setValue(firebaseAuth.getCurrentUser());\r\n            }\r\n        });\r\n    }\r\n\r\n    public void initPoints(){ //for registering a new account only\r\n        HashMap<String, Object> map = new HashMap<>();\r\n        map.put(\"dailyPoints\", 0);\r\n        map.put(\"weeklyPoints\", 0);\r\n        map.put(\"lifetimePoints\", 0);\r\n        database.child(\"Users\").child(registerUserLiveData.getValue().getUid()).child(\"points\").setValue(map).addOnSuccessListener(new OnSuccessListener<Void>() {\r\n            @Override\r\n            public void onSuccess(Void aVoid) {\r\n                dailyPoints.setValue(0);\r\n                weeklyPoints.setValue(0);\r\n                lifetimePoints.setValue(0);\r\n            }\r\n        }).addOnFailureListener(new OnFailureListener() {\r\n            @Override\r\n            public void onFailure(@NonNull Exception e) {\r\n            }\r\n        });\r\n    }\r\n\r\n    public void initMeasurements(int weight, int height, int neckSize, int waistSize, int hipSize, String gender){ //for registering a new account only\r\n        DecimalFormat df = new DecimalFormat(\"####0.00\");\r\n        double bodyFat;\r\n        if(gender.equals(\"Female\")){\r\n            bodyFat = 163.205 * Math.log10(waistSize + hipSize - neckSize) - 97.684 * Math.log10(height) + 36.76;\r\n        }else{\r\n            bodyFat = 86.010 * Math.log10(waistSize - neckSize) - 70.041 * Math.log10(height) + 36.76;\r\n        }\r\n        if (bodyFat < 0.1 || isNaN(bodyFat)){\r\n            bodyFat = 0.1;\r\n        }\r\n        bodyFat = Double.parseDouble(df.format(bodyFat)); //reduce body fat to two decimal places\r\n        mutableBodyFat.postValue(bodyFat);\r\n        final HashMap<String, Object> map = new HashMap<>();\r\n        map.put(\"weight\", weight);\r\n        map.put(\"height\", height);\r\n        map.put(\"neckSize\", neckSize);\r\n        map.put(\"waistSize\", waistSize);\r\n        map.put(\"hipSize\", hipSize);\r\n        map.put(\"bodyFatPercent\", bodyFat);\r\n        database.child(\"Users\").child(registerUserLiveData.getValue().getUid()).child(\"measurements\").setValue(map).addOnSuccessListener(new OnSuccessListener<Void>() {\r\n            @Override\r\n            public void onSuccess(Void aVoid) {\r\n                mutableWeight.postValue((Integer) map.get(\"weight\"));\r\n                mutableHeight.postValue((Integer) map.get(\"height\"));\r\n                mutableNeckSize.postValue((Integer) map.get(\"neckSize\"));\r\n                mutableWaistSize.postValue((Integer) map.get(\"waistSize\"));\r\n                mutableHipSize.postValue((Integer) map.get(\"hipSize\"));\r\n                mutableBodyFat.setValue((Double) map.get(\"bodyFatPercent\"));\r\n                userMutableLiveData.postValue(registerUserLiveData.getValue());\r\n            }\r\n        }).addOnFailureListener(new OnFailureListener() {\r\n            @Override\r\n            public void onFailure(@NonNull Exception e) {\r\n            }\r\n        });\r\n    }\r\n\r\n    public void initDemographics(String email, String firstName, String lastName, String phoneNumber, String birthday, String gender){ //for registering a new account only\r\n        database.child(\"UsersByNumber\").child(phoneNumber).setValue(Objects.requireNonNull(registerUserLiveData.getValue()).getUid()); //adds user to UsersByNumber child\r\n        final HashMap<String, String> map = new HashMap<>();\r\n        map.put(\"email\", email);\r\n        map.put(\"firstName\", firstName);\r\n        map.put(\"lastName\", lastName);\r\n        map.put(\"phoneNumber\", phoneNumber);\r\n        map.put(\"birthday\", birthday);\r\n        map.put(\"gender\", gender);\r\n        database.child(\"Users\").child(registerUserLiveData.getValue().getUid()).child(\"demographics\").setValue(map).addOnSuccessListener(new OnSuccessListener<Void>() {\r\n            @Override\r\n            public void onSuccess(Void aVoid) {\r\n                mutableGender.postValue(map.get(\"gender\"));\r\n                mutableBirthday.postValue(map.get(\"birthday\"));\r\n            }\r\n        }).addOnFailureListener(new OnFailureListener() {\r\n            @Override\r\n            public void onFailure(@NonNull Exception e) {\r\n            }\r\n        });\r\n    }\r\n\r\n    public void initBirthday(){\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + Objects.requireNonNull(userMutableLiveData.getValue()).getUid() + \"/demographics/birthday\");\r\n        database.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) { //calculate the users age given their birthday and todays date\r\n                mutableBirthday.setValue(snapshot.getValue(String.class));\r\n            }\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n            }\r\n        });\r\n    }\r\n\r\n    public void initGender(){\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + userMutableLiveData.getValue().getUid() + \"/demographics/gender\");\r\n        database.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) { //updates the User class with the users gender and initializes body fat\r\n                mutableGender.setValue(snapshot.getValue(String.class));\r\n            }\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n            }\r\n        });\r\n    }\r\n\r\n    public void pointListener(){\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + userMutableLiveData.getValue().getUid() + \"/points\");\r\n        database.addValueEventListener(new ValueEventListener() { //sets the values for weekly points based on what is in the database\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) { //this method will run initially and again anytime data changes\r\n                dailyPoints.setValue(snapshot.child(\"dailyPoints\").getValue(int.class));\r\n                weeklyPoints.setValue(snapshot.child(\"weeklyPoints\").getValue(int.class));\r\n                lifetimePoints.setValue(snapshot.child(\"lifetimePoints\").getValue(int.class));\r\n            }\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n            }\r\n        });\r\n    }\r\n\r\n    public void measurementListener(){\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + Objects.requireNonNull(userMutableLiveData.getValue()).getUid() + \"/measurements\");\r\n        database.addValueEventListener(new ValueEventListener() { //sets the values for the users measurements based on what is in the database\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) { //this method will run initially and again anytime data changes\r\n                //not a final approach. resets all values even if just one changes. TODO: find a way to set only the value that changes, possibly a childEventListener\r\n                mutableHeight.setValue(snapshot.child(\"height\").getValue(int.class));\r\n                mutableHipSize.setValue(snapshot.child(\"hipSize\").getValue(int.class));\r\n                mutableNeckSize.setValue(snapshot.child(\"neckSize\").getValue(int.class));\r\n                mutableWaistSize.setValue(snapshot.child(\"waistSize\").getValue(int.class));\r\n                mutableWeight.setValue(snapshot.child(\"weight\").getValue(int.class));\r\n                mutableBodyFat.setValue(snapshot.child(\"bodyFatPercent\").getValue(double.class));\r\n            }\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n            }\r\n        });\r\n    }\r\n\r\n    public void populateFriendPoints(final Friend friend, String friendCode){\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + friendCode + \"/points\");\r\n        database.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                friend.setDailyPoints(snapshot.child(\"dailyPoints\").getValue(int.class));\r\n                friend.setWeeklyPoints(snapshot.child(\"weeklyPoints\").getValue(int.class));\r\n                friend.setLifetimePoints(snapshot.child(\"lifetimePoints\").getValue(int.class));\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    public void populateFriendNames(final Friend friend, String friendCode){\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + friendCode + \"/demographics/\");\r\n        database.child(\"firstName\").addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                friend.setFirstName(snapshot.getValue(String.class));\r\n                friendsArray.add(friend);\r\n                friends.setValue(friendsArray);// lets observers know the data set has changed\r\n            }\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                System.out.println(\"Friend not found\");\r\n            }\r\n        });\r\n        database.child(\"lastName\").addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                friend.setLastName(snapshot.getValue(String.class));\r\n                friends.setValue(friendsArray);\r\n            }\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                System.out.println(\"Friend not found\");\r\n            }\r\n        });\r\n    }\r\n\r\n    public void friendsListener(){\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + Objects.requireNonNull(userMutableLiveData.getValue()).getUid() + \"/friends\");\r\n        database.addChildEventListener(new ChildEventListener() {\r\n            @Override\r\n            public void onChildAdded(@NonNull DataSnapshot snapshot, @Nullable String previousChildName) {\r\n                Friend friend = new Friend(snapshot.getKey()); //creates a friend with the given uid\r\n                populateFriendNames(friend, snapshot.getKey()); //populates the friends first and last name\r\n                populateFriendPoints(friend, snapshot.getKey());\r\n            }\r\n\r\n            @Override\r\n            public void onChildChanged(@NonNull DataSnapshot snapshot, @Nullable String previousChildName) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onChildRemoved(@NonNull DataSnapshot snapshot) {\r\n                for(Friend friend : Objects.requireNonNull(getFriends().getValue())){\r\n                    if(friend.getUid().equals(snapshot.getKey())){\r\n                        getFriends().getValue().remove(friend);\r\n                        friends.postValue(friendsArray);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onChildMoved(@NonNull DataSnapshot snapshot, @Nullable String previousChildName) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                System.out.println(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    public void addFriend(String phoneNumber){\r\n        database = FirebaseDatabase.getInstance().getReference(\"UsersByNumber/\" + phoneNumber);\r\n            database.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                @Override\r\n                public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                    String newFriendUID = snapshot.getValue(String.class);\r\n                    if (newFriendUID != null && !newFriendUID.equals(Objects.requireNonNull(userMutableLiveData.getValue()).getUid())){ //someone with that phone number exists and it is not the users phone number\r\n                        boolean alreadyFriend = false;\r\n                        for(Friend friend : Objects.requireNonNull(getFriends().getValue())){\r\n                            if(friend.getUid().equals(newFriendUID)){\r\n                                alreadyFriend = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (!alreadyFriend){\r\n                            database = FirebaseDatabase.getInstance().getReference(\"Users/\" + Objects.requireNonNull(userMutableLiveData.getValue()).getUid() + \"/friends/\" + newFriendUID);\r\n                            database.setValue(true); //we could use this value as an approval for friend request\r\n                        }else {\r\n                            //TODO: communicate to user that they are already friends with the person they tried to add.\r\n                        }\r\n                    }else {\r\n                        //TODO: communicate to user that a user with that phone number does not exist or it is their own number.\r\n                    }\r\n                }\r\n                @Override\r\n                public void onCancelled(@NonNull DatabaseError error) {\r\n                    System.out.println(\"Failed to add friend. \" + error);\r\n                }\r\n            });\r\n    }\r\n\r\n    public void removeFriend(final int index){\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + Objects.requireNonNull(userMutableLiveData.getValue()).getUid() + \"/friends/\" + Objects.requireNonNull(friends.getValue()).get(index).getUid());\r\n        database.removeValue().addOnCompleteListener(new OnCompleteListener<Void>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<Void> task) {\r\n                //TODO: communicate to user that the friend was removed\r\n            }\r\n        });\r\n    }\r\n\r\n    public int updatePoints(int difficulty, int numReps){ //computes and sets the users new point value. only used after a user does an exercise\r\n        double bodyFat = getMutableBodyFat().getValue();\r\n        int points = (int) Math.round(numReps * difficulty - (difficulty * numReps * (1 - (bodyFat / 100)))); //algorithm that computes points for given exercise\r\n        int currentDaily = getDailyPoints().getValue();\r\n        int currentWeekly = getWeeklyPoints().getValue();\r\n        int currentLifetime = getLifetimePoints().getValue();\r\n        dailyPoints.setValue(currentDaily + points);\r\n        weeklyPoints.setValue(currentWeekly + points);\r\n        lifetimePoints.setValue(currentLifetime + points);\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + Objects.requireNonNull(userMutableLiveData.getValue()).getUid() + \"/points/dailyPoints\");\r\n        database.setValue(currentDaily + points);\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + userMutableLiveData.getValue().getUid() + \"/points/weeklyPoints\");\r\n        database.setValue(currentWeekly + points);\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + userMutableLiveData.getValue().getUid() + \"/points/lifetimePoints\");\r\n        database.setValue(currentLifetime + points);\r\n        return points;\r\n    }\r\n\r\n    public void updateMeasurement(String source, int measurement){ //updates the users measurement. This will only update the measurement that is changed\r\n        switch (source){\r\n            case \"height\":\r\n                mutableHeight.setValue(measurement);\r\n                break;\r\n            case \"hipSize\":\r\n                mutableHipSize.setValue(measurement);\r\n                break;\r\n            case \"neckSize\":\r\n                mutableNeckSize.setValue(measurement);\r\n                break;\r\n            case \"waistSize\":\r\n                mutableWaistSize.setValue(measurement);\r\n                break;\r\n            case \"weight\":\r\n                mutableWeight.setValue(measurement);\r\n                break;\r\n        }\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + userMutableLiveData.getValue().getUid() + \"/measurements/\" + source);\r\n        database.setValue(measurement);\r\n        updateBodyFat();\r\n    }\r\n\r\n    public void updateBodyFat(){\r\n        DecimalFormat df = new DecimalFormat(\"####0.00\");\r\n        double bodyFat;\r\n        if(getMutableGender().getValue().equals(\"Female\")){\r\n            bodyFat = 163.205 * Math.log10(getMutableWaistSize().getValue() + getMutableHipSize().getValue() - getMutableNeckSize().getValue()) - 97.684 * Math.log10(getMutableHeight().getValue()) + 36.76;\r\n        }else{\r\n            bodyFat = 86.010 * Math.log10(getMutableWaistSize().getValue() - getMutableNeckSize().getValue()) - 70.041 * Math.log10(getMutableHeight().getValue()) + 36.76;\r\n        }\r\n        if (bodyFat < 0.1 || isNaN(bodyFat)){\r\n            bodyFat = 0.1;\r\n        }\r\n        mutableBodyFat.postValue(Double.parseDouble(df.format(bodyFat)));\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + userMutableLiveData.getValue().getUid() + \"/measurements/bodyFatPercent\");\r\n        database.setValue(Double.parseDouble(df.format(bodyFat)));\r\n    }\r\n\r\n    public void updateDailyDate(){\r\n//      Creates weekly start and end date for when the points need updating.\r\n//        final Calendar calendar = Calendar.getInstance();\r\n        final String startDate = DateFormat.getDateInstance(DateFormat.FULL).format(calendar.getTime());  // Start date\r\n//        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n        try {\r\n            calendar.setTime(sdf.parse(startDate));\r\n        } catch (ParseException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n//        SimpleDateFormat sdf1 = new SimpleDateFormat(\"MM-dd-yyyy\");\r\n        final String output = sdf.format(calendar.getTime());\r\n\r\n        database.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                database = FirebaseDatabase.getInstance().getReference(\"Dates/Daily\");\r\n                database.setValue(output);\r\n\r\n//                Calendar calendar = Calendar.getInstance();\r\n\r\n                calendar.add(Calendar.DATE, 1);  // number of days to add, can also use Calendar.DAY_OF_MONTH in place of Calendar.DATE\r\n                SimpleDateFormat sdf1 = new SimpleDateFormat(\"MM-dd-yyyy\");\r\n                final String output = sdf1.format(calendar.getTime());\r\n                database = FirebaseDatabase.getInstance().getReference(\"Dates/NextDay\");\r\n                database.setValue(output);\r\n            }\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                System.out.println(\"Daily Date not updated\" + error);\r\n            }\r\n        });\r\n    }\r\n\r\n    public void updateWeeklyDate(){\r\n//      Creates weekly start and end date for when the points need updating.\r\n//        Calendar calendar = Calendar.getInstance();\r\n\r\n        final String startDate = DateFormat.getDateInstance(DateFormat.FULL).format(calendar.getTime());  // Start date\r\n//        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n        try {\r\n            calendar.setTime(sdf.parse(startDate));\r\n        } catch (ParseException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        //        advance one week\r\n        calendar.add(Calendar.DATE, 7);  // number of days to add, can also use Calendar.DAY_OF_MONTH in place of Calendar.DATE\r\n        SimpleDateFormat sdf1 = new SimpleDateFormat(\"MM-dd-yyyy\");\r\n        final String output = sdf1.format(calendar.getTime());\r\n\r\n        database.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                database = FirebaseDatabase.getInstance().getReference(\"Dates/EndOfWeek\");\r\n                database.setValue(output);\r\n            }\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                System.out.println(\"Weekly Date not updated\" + error);\r\n            }\r\n        });\r\n    }\r\n\r\n    public void checkForNewDay(){\r\n        database = FirebaseDatabase.getInstance().getReference(\"Dates/NextDay\");\r\n        database.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                String SDF = snapshot.getValue(String.class);\r\n                System.out.println(SDF);\r\n//                checks to see if the daily points need to be reset\r\n                if(SDF.equals(dateString)){\r\n                    updateDailyDate();\r\n                    database = FirebaseDatabase.getInstance().getReference(\"Users/\" + getUserMutableLiveData().getValue().getUid() + \"/points/dailyPoints\");\r\n                    database.setValue(0);\r\n                }\r\n            }\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                System.out.println(\"Weekly Date not updated\" + error);\r\n            }\r\n        });\r\n    }\r\n\r\n    public void checkWeeklyDate(){\r\n        database = FirebaseDatabase.getInstance().getReference(\"Dates/EndOfWeek\");\r\n        database.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                String SDF = snapshot.getValue(String.class);\r\n//                checks to see if the weekly points need to be reset\r\n                if(SDF.equals(dateString)){\r\n                    updateWeeklyDate();\r\n                    database = FirebaseDatabase.getInstance().getReference(\"Users/\" + getUserMutableLiveData().getValue().getUid() + \"/points/weeklyPoints\");\r\n                    database.setValue(0);\r\n                }\r\n            }\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                System.out.println(\"Weekly Date not updated\" + error);\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/workoutapp/FirebaseRepository.java	(revision 6a0c3caf26f3fa198ffd0b92ae245cdc582ec9ee)
+++ app/src/main/java/com/example/workoutapp/FirebaseRepository.java	(date 1604948915472)
@@ -55,14 +55,14 @@
     private MutableLiveData<ArrayList<Friend>> friends;
     private Calendar calendar;
     private SimpleDateFormat sdf;
-    private String dateString;
+    private int dateInt;
     private ArrayList<Friend> friendsArray;
 
     public FirebaseRepository(Application application){
         friendsArray = new ArrayList<>();
         calendar = Calendar.getInstance();
-        sdf = new SimpleDateFormat("MM-dd-yyyy", Locale.US);
-        dateString = sdf.format(calendar.getTime());
+        sdf = new SimpleDateFormat("yyyyMMdd", Locale.US);
+        dateInt = Integer.parseInt(sdf.format(calendar.getTime()));
         this.application = application;
         firebaseAuth = FirebaseAuth.getInstance();
         database = FirebaseDatabase.getInstance().getReference();
@@ -481,12 +481,11 @@
     }
 
     public void updateDailyDate(){
-//      Creates weekly start and end date for when the points need updating.
+//      Creates daily start and end date for when the points need updating.
 //        final Calendar calendar = Calendar.getInstance();
         final String startDate = DateFormat.getDateInstance(DateFormat.FULL).format(calendar.getTime());  // Start date
-//        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
         try {
-            calendar.setTime(sdf.parse(startDate));
+            calendar.setTime(Objects.requireNonNull(sdf.parse(startDate)));
         } catch (ParseException e) {
             e.printStackTrace();
         }
@@ -503,8 +502,7 @@
 //                Calendar calendar = Calendar.getInstance();
 
                 calendar.add(Calendar.DATE, 1);  // number of days to add, can also use Calendar.DAY_OF_MONTH in place of Calendar.DATE
-                SimpleDateFormat sdf1 = new SimpleDateFormat("MM-dd-yyyy");
-                final String output = sdf1.format(calendar.getTime());
+                final String output = sdf.format(calendar.getTime());
                 database = FirebaseDatabase.getInstance().getReference("Dates/NextDay");
                 database.setValue(output);
             }
@@ -526,12 +524,10 @@
         } catch (ParseException e) {
             e.printStackTrace();
         }
-
         //        advance one week
         calendar.add(Calendar.DATE, 7);  // number of days to add, can also use Calendar.DAY_OF_MONTH in place of Calendar.DATE
         SimpleDateFormat sdf1 = new SimpleDateFormat("MM-dd-yyyy");
         final String output = sdf1.format(calendar.getTime());
-
         database.addListenerForSingleValueEvent(new ValueEventListener() {
             @Override
             public void onDataChange(@NonNull DataSnapshot snapshot) {
@@ -546,18 +542,25 @@
     }
 
     public void checkForNewDay(){
-        database = FirebaseDatabase.getInstance().getReference("Dates/NextDay");
+        database = FirebaseDatabase.getInstance().getReference("Dates/Daily");
         database.addListenerForSingleValueEvent(new ValueEventListener() {
             @Override
             public void onDataChange(@NonNull DataSnapshot snapshot) {
-                String SDF = snapshot.getValue(String.class);
-                System.out.println(SDF);
+               int dailyDate = Integer.parseInt(Objects.requireNonNull(snapshot.getValue(String.class)));
 //                checks to see if the daily points need to be reset
-                if(SDF.equals(dateString)){
-                    updateDailyDate();
+                int difference = dailyDate - dateInt;
+                if(difference > 0){
+                    //update daily points to 0
+                }
+                if(difference > 7){
+                    //update weekly points to 0
+                }
+                //set last login date to today.
+                if(dailyDate < dateInt && getDailyPoints().getValue() != 0){
                     database = FirebaseDatabase.getInstance().getReference("Users/" + getUserMutableLiveData().getValue().getUid() + "/points/dailyPoints");
                     database.setValue(0);
                 }
+                updateDailyDate();
             }
             @Override
             public void onCancelled(@NonNull DatabaseError error) {
@@ -571,13 +574,13 @@
         database.addListenerForSingleValueEvent(new ValueEventListener() {
             @Override
             public void onDataChange(@NonNull DataSnapshot snapshot) {
-                String SDF = snapshot.getValue(String.class);
+//                int  = snapshot.getValue(String.class);
 //                checks to see if the weekly points need to be reset
-                if(SDF.equals(dateString)){
-                    updateWeeklyDate();
-                    database = FirebaseDatabase.getInstance().getReference("Users/" + getUserMutableLiveData().getValue().getUid() + "/points/weeklyPoints");
-                    database.setValue(0);
-                }
+//                if(SDF.equals(dateString)){
+//                    updateWeeklyDate();
+//                    database = FirebaseDatabase.getInstance().getReference("Users/" + getUserMutableLiveData().getValue().getUid() + "/points/weeklyPoints");
+//                    database.setValue(0);
+//                }
             }
             @Override
             public void onCancelled(@NonNull DatabaseError error) {
