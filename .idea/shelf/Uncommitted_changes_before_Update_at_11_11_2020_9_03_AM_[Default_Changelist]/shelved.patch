Index: app/src/main/java/com/example/workoutapp/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.workoutapp;\r\n\r\npublic class User { //Create this class and migrate everything from FirebaseRepository to this class. FirebaseRepository should only communicate with the database and not store the data.\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/workoutapp/User.java	(revision 6a0c3caf26f3fa198ffd0b92ae245cdc582ec9ee)
+++ app/src/main/java/com/example/workoutapp/User.java	(date 1605105219343)
@@ -1,4 +1,177 @@
 package com.example.workoutapp;
 
-public class User { //Create this class and migrate everything from FirebaseRepository to this class. FirebaseRepository should only communicate with the database and not store the data.
+import androidx.lifecycle.LiveData;
+import androidx.lifecycle.MutableLiveData;
+
+import com.google.firebase.auth.FirebaseAuth;
+import com.google.firebase.auth.FirebaseUser;
+
+import java.util.ArrayList;
+
+public class User {
+    //authentication
+    private String UID;
+    private MutableLiveData<FirebaseUser> user;
+    //demographics
+    private String birthday;
+    private String firstName;
+    private String gender;
+    private String lastName;
+    private String phoneNumber;
+    //friends
+    private ArrayList<Friend> friends;
+    //measurements
+    private double bodyFatPercent;
+    private int height;
+    private int hipSize;
+    private int neckSize;
+    private int waistSize;
+    private int weight;
+    //points
+    private int dailyPoints;
+    private int lifetimePoints;
+    private int weeklyPoints;
+
+    public User(){
+        user = new MutableLiveData<>();
+        if(FirebaseAuth.getInstance().getCurrentUser() != null){
+            user.postValue(FirebaseAuth.getInstance().getCurrentUser());
+        }
+    }
+
+    public LiveData<FirebaseUser> getUser() {
+        return user;
+    }
+
+    public void setUser(FirebaseUser user) {
+        this.user.postValue(user);
+    }
+
+    public String getUID() {
+        return UID;
+    }
+
+    public void setUID(String UID) {
+        this.UID = UID;
+    }
+
+    public String getBirthday() {
+        return birthday;
+    }
+
+    public void setBirthday(String birthday) {
+        this.birthday = birthday;
+    }
+
+    public String getFirstName() {
+        return firstName;
+    }
+
+    public void setFirstName(String firstName) {
+        this.firstName = firstName;
+    }
+
+    public String getGender() {
+        return gender;
+    }
+
+    public void setGender(String gender) {
+        this.gender = gender;
+    }
+
+    public String getLastName() {
+        return lastName;
+    }
+
+    public void setLastName(String lastName) {
+        this.lastName = lastName;
+    }
+
+    public String getPhoneNumber() {
+        return phoneNumber;
+    }
+
+    public void setPhoneNumber(String phoneNumber) {
+        this.phoneNumber = phoneNumber;
+    }
+
+    public ArrayList<Friend> getFriends() {
+        return friends;
+    }
+
+    public void setFriends(ArrayList<Friend> friends) {
+        this.friends = friends;
+    }
+
+    public double getBodyFatPercent() {
+        return bodyFatPercent;
+    }
+
+    public void setBodyFatPercent(double bodyFatPercent) {
+        this.bodyFatPercent = bodyFatPercent;
+    }
+
+    public int getHeight() {
+        return height;
+    }
+
+    public void setHeight(int height) {
+        this.height = height;
+    }
+
+    public int getHipSize() {
+        return hipSize;
+    }
+
+    public void setHipSize(int hipSize) {
+        this.hipSize = hipSize;
+    }
+
+    public int getNeckSize() {
+        return neckSize;
+    }
+
+    public void setNeckSize(int neckSize) {
+        this.neckSize = neckSize;
+    }
+
+    public int getWaistSize() {
+        return waistSize;
+    }
+
+    public void setWaistSize(int waistSize) {
+        this.waistSize = waistSize;
+    }
+
+    public int getWeight() {
+        return weight;
+    }
+
+    public void setWeight(int weight) {
+        this.weight = weight;
+    }
+
+    public int getDailyPoints() {
+        return dailyPoints;
+    }
+
+    public void setDailyPoints(int dailyPoints) {
+        this.dailyPoints = dailyPoints;
+    }
+
+    public int getLifetimePoints() {
+        return lifetimePoints;
+    }
+
+    public void setLifetimePoints(int lifetimePoints) {
+        this.lifetimePoints = lifetimePoints;
+    }
+
+    public int getWeeklyPoints() {
+        return weeklyPoints;
+    }
+
+    public void setWeeklyPoints(int weeklyPoints) {
+        this.weeklyPoints = weeklyPoints;
+    }
 }
Index: app/src/main/java/com/example/workoutapp/UserViewModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.workoutapp;\r\n\r\nimport android.app.Application;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.lifecycle.AndroidViewModel;\r\nimport androidx.lifecycle.LiveData;\r\nimport androidx.lifecycle.MutableLiveData;\r\n\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class UserViewModel extends AndroidViewModel {\r\n\r\n    private MutableLiveData<FirebaseUser> userMutableLiveData;\r\n    private MutableLiveData<FirebaseUser> registerUserLiveData;\r\n    private FirebaseRepository firebaseRepository;\r\n    private MutableLiveData<Integer> dailyPoints;\r\n    private MutableLiveData<Integer> weeklyPoints;\r\n    private MutableLiveData<Integer> lifetimePoints;\r\n    private MutableLiveData<Integer> mutableWeight;\r\n    private MutableLiveData<Integer> mutableHeight;\r\n    private MutableLiveData<Integer> mutableNeckSize;\r\n    private MutableLiveData<Integer> mutableWaistSize;\r\n    private MutableLiveData<Integer> mutableHipSize;\r\n    public MutableLiveData<Double> mutableBodyFat;\r\n    public MutableLiveData<String> mutableGender;\r\n    private MutableLiveData<String> mutableBirthday;\r\n    private MutableLiveData<ArrayList<Friend>> friends;\r\n    private Application application;\r\n\r\n    public UserViewModel(@NonNull Application application) {\r\n        super(application);\r\n        this.application = application;\r\n        firebaseRepository = new FirebaseRepository(application);\r\n        userMutableLiveData = firebaseRepository.getUserMutableLiveData();\r\n        registerUserLiveData = firebaseRepository.getRegisterUserLiveData();\r\n        dailyPoints = firebaseRepository.getDailyPoints();\r\n        weeklyPoints = firebaseRepository.getWeeklyPoints();\r\n        lifetimePoints = firebaseRepository.getLifetimePoints();\r\n        mutableWeight = firebaseRepository.getMutableWeight();\r\n        mutableHeight = firebaseRepository.getMutableHeight();\r\n        mutableNeckSize = firebaseRepository.getMutableNeckSize();\r\n        mutableWaistSize = firebaseRepository.getMutableWaistSize();\r\n        mutableHipSize = firebaseRepository.getMutableHipSize();\r\n        mutableGender = firebaseRepository.getMutableGender();\r\n        mutableBirthday = firebaseRepository.getMutableBirthday();\r\n        mutableBodyFat = firebaseRepository.getMutableBodyFat();\r\n        friends = firebaseRepository.getFriends();\r\n        if(FirebaseAuth.getInstance().getCurrentUser() != null){\r\n            initUser(); //initializes user\r\n        }\r\n    }\r\n\r\n    public LiveData<FirebaseUser> getUserMutableLiveData() {\r\n        return userMutableLiveData;\r\n    }\r\n\r\n    public LiveData<FirebaseUser> getRegisterUserLiveData() {\r\n        return registerUserLiveData;\r\n    }\r\n\r\n    public LiveData<Integer> getDailyPoints() {\r\n        return dailyPoints;\r\n    }\r\n\r\n    public LiveData<Integer> getWeeklyPoints() {\r\n        return weeklyPoints;\r\n    }\r\n\r\n    public LiveData<Integer> getLifetimePoints() {\r\n        return lifetimePoints;\r\n    }\r\n\r\n    public LiveData<Integer> getMutableWeight() {\r\n        return mutableWeight;\r\n    }\r\n\r\n    public LiveData<Integer> getMutableHeight() {\r\n        return mutableHeight;\r\n    }\r\n\r\n    public LiveData<Integer> getMutableNeckSize() {\r\n        return mutableNeckSize;\r\n    }\r\n\r\n    public LiveData<Integer> getMutableWaistSize() {\r\n        return mutableWaistSize;\r\n    }\r\n\r\n    public LiveData<Integer> getMutableHipSize() {\r\n        return mutableHipSize;\r\n    }\r\n\r\n    public LiveData<Double> getMutableBodyFat() {\r\n        return mutableBodyFat;\r\n    }\r\n\r\n    public MutableLiveData<String> getMutableGender() {\r\n        return mutableGender;\r\n    }\r\n\r\n    public MutableLiveData<ArrayList<Friend>> getFriends() {\r\n        return friends;\r\n    }\r\n\r\n    public void register(String email, String password){\r\n        firebaseRepository.register(email, password);\r\n    }\r\n\r\n    public void signIn(String username, String password){\r\n        firebaseRepository.signIn(username, password);\r\n    }\r\n\r\n    public void initMeasurements(int weight, int height, int neckSize, int waistSize, int hipSize, String gender){\r\n        firebaseRepository.initMeasurements(weight, height, neckSize, waistSize, hipSize, gender);\r\n    }\r\n\r\n    public void initDemographics(String email, String firstName, String lastName, String phoneNumber, String birthday, String gender){\r\n        firebaseRepository.initDemographics(email, firstName, lastName, phoneNumber, birthday, gender);\r\n    }\r\n\r\n    public void initUser(){\r\n        initCurrentUser();\r\n        initBirthday();\r\n        initGender();\r\n        measurementListener();\r\n        pointListener();\r\n        friendsListener();\r\n        //checks to see if dates need reset in firebase\r\n        firebaseRepository.checkForNewDay();\r\n        firebaseRepository.checkWeeklyDate();\r\n    }\r\n\r\n    public void addFriend(String phoneNumber){\r\n        firebaseRepository.addFriend(phoneNumber);\r\n    }\r\n\r\n    public void removeFriend(int index){\r\n        firebaseRepository.removeFriend(index);\r\n    }\r\n\r\n    public void initCurrentUser(){\r\n        firebaseRepository.initCurrentUser();\r\n    }\r\n\r\n    public void initBirthday(){\r\n        firebaseRepository.initBirthday();\r\n    }\r\n\r\n    public void initGender(){\r\n        firebaseRepository.initGender();\r\n    }\r\n\r\n    public void pointListener(){\r\n        firebaseRepository.pointListener();\r\n    }\r\n\r\n    public void measurementListener(){\r\n        firebaseRepository.measurementListener();\r\n    }\r\n\r\n    public void updateMeasurement(String source, int measurement){\r\n        firebaseRepository.updateMeasurement(source, measurement);\r\n    }\r\n\r\n    public int updatePoints(int difficulty, int numReps){\r\n        int points = firebaseRepository.updatePoints(difficulty, numReps);\r\n        return points;\r\n    }\r\n\r\n    public void friendsListener(){\r\n        firebaseRepository.friendsListener();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/workoutapp/UserViewModel.java	(revision 6a0c3caf26f3fa198ffd0b92ae245cdc582ec9ee)
+++ app/src/main/java/com/example/workoutapp/UserViewModel.java	(date 1605106195598)
@@ -6,6 +6,7 @@
 import androidx.lifecycle.AndroidViewModel;
 import androidx.lifecycle.LiveData;
 import androidx.lifecycle.MutableLiveData;
+import androidx.lifecycle.Observer;
 
 import com.google.firebase.auth.FirebaseAuth;
 import com.google.firebase.auth.FirebaseUser;
@@ -31,9 +32,17 @@
     private MutableLiveData<ArrayList<Friend>> friends;
     private Application application;
 
+    private MutableLiveData<User> user;
+    private FirebaseAccessor firebaseAccessor;
+
     public UserViewModel(@NonNull Application application) {
         super(application);
+
+        //new implementation
         this.application = application;
+        user = new MutableLiveData<>(new User());
+        firebaseAccessor = new FirebaseAccessor(application);
+
         firebaseRepository = new FirebaseRepository(application);
         userMutableLiveData = firebaseRepository.getUserMutableLiveData();
         registerUserLiveData = firebaseRepository.getRegisterUserLiveData();
@@ -54,6 +63,19 @@
         }
     }
 
+    public MutableLiveData<User> getUser(){
+        return user;
+    }
+
+    public FirebaseAccessor getFirebaseAccessor(){
+        return firebaseAccessor;
+    }
+
+    public void initializeUser(){
+        firebaseAccessor.initUser();
+    }
+
+
     public LiveData<FirebaseUser> getUserMutableLiveData() {
         return userMutableLiveData;
     }
@@ -130,8 +152,8 @@
         pointListener();
         friendsListener();
         //checks to see if dates need reset in firebase
-        firebaseRepository.checkForNewDay();
-        firebaseRepository.checkWeeklyDate();
+//        firebaseRepository.checkForNewDay();
+//        firebaseRepository.checkWeeklyDate();
     }
 
     public void addFriend(String phoneNumber){
Index: app/src/main/java/com/example/workoutapp/ui/logon/LoginFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.workoutapp.ui.logon;\r\n\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.navigation.NavController;\r\nimport androidx.navigation.Navigation;\r\n\r\nimport android.text.Editable;\r\nimport android.text.TextUtils;\r\nimport android.text.TextWatcher;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.TextView;\r\n\r\nimport com.example.workoutapp.LoginPageActivity;\r\nimport com.example.workoutapp.R;\r\n\r\nimport java.util.Objects;\r\n\r\npublic class LoginFragment extends Fragment implements View.OnClickListener, TextWatcher {\r\n\r\n    private EditText loginNumber;\r\n    private EditText loginPassword;\r\n    private TextView forgotPassword;\r\n    private Button loginBtn;\r\n    private LinearLayout layout;\r\n\r\n    private NavController navController;\r\n\r\n    public LoginFragment() {\r\n        // Required empty public constructor\r\n    }\r\n\r\n    public static LoginFragment newInstance() {\r\n        LoginFragment fragment = new LoginFragment();\r\n        Bundle args = new Bundle();\r\n        fragment.setArguments(args);\r\n        return fragment;\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n        navController = Navigation.findNavController(view);\r\n        view.findViewById(R.id.signUp).setOnClickListener(this);\r\n        view.findViewById(R.id.loginBtn).setOnClickListener(this);\r\n        view.findViewById(R.id.forgotPassword).setOnClickListener(this);\r\n        loginPassword = view.findViewById(R.id.loginPassword);\r\n        loginNumber = view.findViewById(R.id.email);\r\n        loginBtn = view.findViewById(R.id.loginBtn);\r\n        loginBtn.setClickable(false);\r\n        layout = view.findViewById(R.id.layout);\r\n        forgotPassword = view.findViewById(R.id.forgotPassword);\r\n        loginNumber.addTextChangedListener(this);\r\n        loginPassword.addTextChangedListener(this);\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        return inflater.inflate(R.layout.fragment_login, container, false);\r\n    }\r\n\r\n    @Override\r\n    public void onClick(View v) {\r\n        switch (v.getId()){\r\n            case R.id.signUp:\r\n                navController.navigate(R.id.action_loginFragment_to_registerFragment);\r\n                break;\r\n            case R.id.loginBtn:\r\n                String username = loginNumber.getText().toString();\r\n                String password = loginPassword.getText().toString();\r\n                ((LoginPageActivity)getActivity()).signIn(username, password);\r\n                break;\r\n            case R.id.forgotPassword:\r\n                break;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void afterTextChanged(Editable s) {\r\n        if (!TextUtils.isEmpty(loginNumber.getText().toString()) && !TextUtils.isEmpty(loginPassword.getText().toString())) {\r\n            loginBtn.setBackground(ContextCompat.getDrawable(requireActivity(), R.drawable.ripple_effect));\r\n            loginBtn.setClickable(true);\r\n        }else {\r\n            loginBtn.setBackgroundColor(getResources().getColor(R.color.cardview_shadow_start_color));\r\n            loginBtn.setClickable(false);\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/workoutapp/ui/logon/LoginFragment.java	(revision 6a0c3caf26f3fa198ffd0b92ae245cdc582ec9ee)
+++ app/src/main/java/com/example/workoutapp/ui/logon/LoginFragment.java	(date 1605042403941)
@@ -1,7 +1,6 @@
 package com.example.workoutapp.ui.logon;
 
 
-import android.content.Intent;
 import android.os.Bundle;
 
 import androidx.annotation.NonNull;
@@ -25,8 +24,6 @@
 import com.example.workoutapp.LoginPageActivity;
 import com.example.workoutapp.R;
 
-import java.util.Objects;
-
 public class LoginFragment extends Fragment implements View.OnClickListener, TextWatcher {
 
     private EditText loginNumber;
Index: app/src/main/java/com/example/workoutapp/ui/logon/RegisterFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.workoutapp.ui.logon;\r\n\r\nimport android.os.Bundle;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.lifecycle.Observer;\r\nimport androidx.lifecycle.ViewModelProvider;\r\nimport androidx.navigation.NavController;\r\nimport androidx.navigation.Navigation;\r\n\r\nimport android.text.Editable;\r\nimport android.text.TextUtils;\r\nimport android.text.TextWatcher;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\n\r\nimport com.example.workoutapp.LoginPageActivity;\r\nimport com.example.workoutapp.R;\r\nimport com.example.workoutapp.UserViewModel;\r\nimport com.google.android.material.snackbar.Snackbar;\r\nimport com.google.android.material.tabs.TabLayout;\r\nimport com.google.firebase.auth.FirebaseUser;\r\n\r\nimport java.util.Objects;\r\n\r\n\r\npublic class RegisterFragment extends Fragment implements View.OnClickListener, TextWatcher{\r\n\r\n    private NavController navController;\r\n    public EditText firstName, lastName, phoneNumber, password, email;\r\n    private Button nextBtn;\r\n    private UserViewModel userViewModel;\r\n\r\n    public RegisterFragment() {\r\n        // Required empty public constructor\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n        navController = Navigation.findNavController(view);\r\n        view.findViewById(R.id.goBack).setOnClickListener(this);\r\n        view.findViewById(R.id.nextBtn).setOnClickListener(this);\r\n        firstName = view.findViewById(R.id.firstName);\r\n        lastName = view.findViewById(R.id.lastName);\r\n        email = view.findViewById(R.id.email);\r\n        phoneNumber = view.findViewById(R.id.phoneNumber);\r\n        password = view.findViewById(R.id.password);\r\n        nextBtn = view.findViewById(R.id.nextBtn);\r\n\r\n        firstName.addTextChangedListener(this);\r\n        lastName.addTextChangedListener(this);\r\n        phoneNumber.addTextChangedListener(this);\r\n        password.addTextChangedListener(this);\r\n        email.addTextChangedListener(this);\r\n\r\n        nextBtn.setClickable(false);\r\n        userViewModel = new ViewModelProvider(requireActivity()).get(UserViewModel.class);\r\n        userViewModel.getRegisterUserLiveData().observe(getViewLifecycleOwner(), new Observer<FirebaseUser>() {\r\n            @Override\r\n            public void onChanged(FirebaseUser firebaseUser) {\r\n                if(firebaseUser != null){\r\n                    String message = \"User created successully\";\r\n                    System.out.println(message);\r\n                    Snackbar snackbar = Snackbar.make(requireActivity().findViewById(R.id.registerLayout), message, Snackbar.LENGTH_SHORT);\r\n                    snackbar.show();\r\n                    Bundle bundle = new Bundle(); // bundles the users info from registerFragment to use in Demographics fragment\r\n                    bundle.putString(\"firstName\", firstName.getText().toString());\r\n                    bundle.putString(\"lastName\", lastName.getText().toString());\r\n                    bundle.putString(\"phoneNumber\", phoneNumber.getText().toString());\r\n                    bundle.putString(\"email\", email.getText().toString());\r\n                    bundle.putString(\"password\", password.getText().toString());\r\n                    userViewModel.getRegisterUserLiveData().removeObservers(getViewLifecycleOwner());\r\n                    navController.navigate(R.id.action_registerFragment_to_demographicsFragment, bundle);\r\n                }\r\n                else {\r\n                    String message = \"A user with that email already exists.\";\r\n                    System.out.println(message);\r\n                    Snackbar snackbar = Snackbar.make(requireActivity().findViewById(R.id.registerLayout), message, Snackbar.LENGTH_SHORT);\r\n                    snackbar.show();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        return inflater.inflate(R.layout.fragment_register, container, false);\r\n    }\r\n\r\n    @Override\r\n    public void onClick(View v) {\r\n        switch (v.getId()){\r\n            case R.id.goBack:\r\n                navController.navigateUp();\r\n                break;\r\n            case R.id.nextBtn:\r\n                ((LoginPageActivity)getActivity()).register(this.email.getText().toString(), this.password.getText().toString());\r\n                break;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void afterTextChanged(Editable s) {\r\n        if (!TextUtils.isEmpty(firstName.getText().toString()) && !TextUtils.isEmpty(lastName.getText().toString())&& !TextUtils.isEmpty(phoneNumber.getText().toString())\r\n                && !TextUtils.isEmpty(password.getText().toString())) {\r\n            nextBtn.setBackground(ContextCompat.getDrawable(requireActivity(), R.drawable.ripple_effect));\r\n            nextBtn.setClickable(true);\r\n\r\n        }else {\r\n            nextBtn.setBackgroundColor(getResources().getColor(R.color.cardview_shadow_start_color));\r\n            nextBtn.setClickable(false);\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/workoutapp/ui/logon/RegisterFragment.java	(revision 6a0c3caf26f3fa198ffd0b92ae245cdc582ec9ee)
+++ app/src/main/java/com/example/workoutapp/ui/logon/RegisterFragment.java	(date 1605047331461)
@@ -108,6 +108,7 @@
                 break;
             case R.id.nextBtn:
                 ((LoginPageActivity)getActivity()).register(this.email.getText().toString(), this.password.getText().toString());
+                ((LoginPageActivity)getActivity()).register(this.email.getText().toString(), this.password.getText().toString(), this.phoneNumber.getText().toString());
                 break;
         }
     }
Index: app/src/main/java/com/example/workoutapp/LoginPageActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.workoutapp;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.constraintlayout.widget.ConstraintLayout;\r\nimport androidx.lifecycle.MutableLiveData;\r\nimport androidx.lifecycle.Observer;\r\nimport androidx.lifecycle.ViewModelProvider;\r\n\r\nimport com.example.workoutapp.ui.logon.RegisterFragment;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.OnFailureListener;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.android.material.snackbar.Snackbar;\r\nimport com.google.firebase.auth.AuthResult;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\n\r\nimport java.util.Calendar;\r\nimport java.util.HashMap;\r\nimport java.util.Locale;\r\nimport java.util.Objects;\r\nimport java.util.Timer;\r\nimport java.util.TimerTask;\r\n\r\nimport java.text.DateFormat;\r\nimport java.text.SimpleDateFormat;\r\n\r\n\r\npublic class LoginPageActivity extends AppCompatActivity implements View.OnClickListener {\r\n\r\n    private TextView appName;\r\n    private ConstraintLayout fragmentLayout;\r\n    private TextView userPrompt;\r\n    private ProgressBar progressBar;\r\n    private FirebaseAuth mAuth;\r\n    private DatabaseReference database;\r\n    private FirebaseUser firebaseUser;\r\n    private UserViewModel userViewModel;\r\n\r\n    @Override\r\n    protected void onStart() {\r\n        super.onStart();\r\n        observer();\r\n        firebaseUser = mAuth.getCurrentUser();\r\n        if(firebaseUser != null) {\r\n            userViewModel.initCurrentUser();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_login);\r\n        appName = findViewById(R.id.appName);\r\n        appName.findViewById(R.id.appName).setOnClickListener(this);\r\n        database = FirebaseDatabase.getInstance().getReference();\r\n        this.fragmentLayout = findViewById(R.id.fragmentLayout);\r\n        this.userPrompt = findViewById(R.id.userPrompt);\r\n        this.progressBar = findViewById(R.id.progressBar);\r\n        this.mAuth = FirebaseAuth.getInstance();\r\n        userViewModel = new ViewModelProvider(this).get(UserViewModel.class);\r\n    }\r\n\r\n    public void signIn(final String username, final String password){\r\n        userViewModel.signIn(username, password);\r\n    }\r\n\r\n    public void register(String email, String password){\r\n        userViewModel.register(email, password);\r\n\r\n    }\r\n\r\n    public void observer(){\r\n        userViewModel.getUserMutableLiveData().observe(this, new Observer<FirebaseUser>() {\r\n            @Override\r\n            public void onChanged(FirebaseUser firebaseUser) {\r\n                if(firebaseUser != null){\r\n                    updateUI(\"Logging in.\", false);\r\n                    startActivity(firebaseUser);\r\n                }\r\n                else {\r\n                    updateUI(\"Incorrect credentials\", true);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public void initUser(){\r\n        userViewModel.initUser();\r\n    }\r\n\r\n    public void initMeasurements(int weight, int height, int neckSize, int waistSize, int hipSize, String  gender){\r\n        userViewModel.initMeasurements(weight, height, neckSize, waistSize, hipSize, gender);\r\n    }\r\n\r\n    public void initDemographics(String email, String firstName, String lastName, String phoneNumber, String birthday, String gender){\r\n        userViewModel.initDemographics(email, firstName, lastName, phoneNumber, birthday, gender);\r\n    }\r\n\r\n    public void updateUI(String message, Boolean error){ //updates the ui with a given message, considering adding another value for if error occurs and only update certain elements\r\n        fragmentLayout.setVisibility(View.GONE);\r\n        userPrompt.setText(message);\r\n        progressBar.setVisibility(View.VISIBLE);\r\n        appName.setTextSize(50);\r\n        if(error){\r\n            progressBar.setVisibility(View.GONE);\r\n            Timer timer = new Timer(false);\r\n            timer.schedule(new TimerTask() {\r\n                @Override\r\n                public void run() {\r\n                    runOnUiThread(new Runnable() {\r\n                        @Override\r\n                        public void run() {\r\n                            if (fragmentLayout.getVisibility() == View.VISIBLE){\r\n                                fragmentLayout.setVisibility(View.GONE);\r\n                                appName.setTextSize(50);\r\n                            } else{\r\n                                progressBar.setVisibility(View.GONE);\r\n                                fragmentLayout.setVisibility(View.VISIBLE);\r\n                                appName.setTextSize(36);\r\n                            }\r\n//                            onClick(appName);\r\n                        }\r\n                    });\r\n                }\r\n            }, 1000);\r\n        }\r\n    }\r\n\r\n    public void startActivity(FirebaseUser firebaseUser){\r\n            Intent intent = new Intent(this, MainActivity.class);\r\n            intent.putExtra(\"User\", firebaseUser);\r\n            startActivity(intent); //may need to bundle this classes instance of User to use in MainActivity\r\n            finish();\r\n    }\r\n\r\n    @Override\r\n    public void onClick(View v) {\r\n//        switch (v.getId()){\r\n//            case R.id.appName: // keeping for future transitions\r\n//                if (fragmentLayout.getVisibility() == View.VISIBLE){\r\n//                    fragmentLayout.setVisibility(View.GONE);\r\n//                    appName.setTextSize(50);\r\n//                } else{\r\n//                    progressBar.setVisibility(View.GONE);\r\n//                    fragmentLayout.setVisibility(View.VISIBLE);\r\n//                    appName.setTextSize(36);\r\n//                }\r\n//                break;\r\n//        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/workoutapp/LoginPageActivity.java	(revision 6a0c3caf26f3fa198ffd0b92ae245cdc582ec9ee)
+++ app/src/main/java/com/example/workoutapp/LoginPageActivity.java	(date 1605044554473)
@@ -40,7 +40,7 @@
 import java.text.SimpleDateFormat;
 
 
-public class LoginPageActivity extends AppCompatActivity implements View.OnClickListener {
+public class LoginPageActivity extends AppCompatActivity {
 
     private TextView appName;
     private ConstraintLayout fragmentLayout;
@@ -50,15 +50,16 @@
     private DatabaseReference database;
     private FirebaseUser firebaseUser;
     private UserViewModel userViewModel;
+    private User user;
 
     @Override
     protected void onStart() {
         super.onStart();
-        observer();
-        firebaseUser = mAuth.getCurrentUser();
-        if(firebaseUser != null) {
-            userViewModel.initCurrentUser();
-        }
+//        observer();
+//        firebaseUser = mAuth.getCurrentUser();
+//        if(firebaseUser != null) {
+//            userViewModel.initCurrentUser();
+//        }
     }
 
     @Override
@@ -66,7 +67,6 @@
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_login);
         appName = findViewById(R.id.appName);
-        appName.findViewById(R.id.appName).setOnClickListener(this);
         database = FirebaseDatabase.getInstance().getReference();
         this.fragmentLayout = findViewById(R.id.fragmentLayout);
         this.userPrompt = findViewById(R.id.userPrompt);
@@ -75,13 +75,26 @@
         userViewModel = new ViewModelProvider(this).get(UserViewModel.class);
     }
 
+    @Override
+    protected void onResume() {
+        super.onResume();
+        user = new User();
+        if(user.getUser() != null){
+            startActivity(user.getUser());
+        }
+    }
+
     public void signIn(final String username, final String password){
-        userViewModel.signIn(username, password);
+//        userViewModel.signIn(username, password);
+        userViewModel.getFirebaseAccessor().signIn(username, password);
+    }
+
+    public void register(String email, String password, String phoneNumber){
+        userViewModel.getFirebaseAccessor().register(email, password, phoneNumber);
     }
 
     public void register(String email, String password){
         userViewModel.register(email, password);
-
     }
 
     public void observer(){
@@ -99,10 +112,6 @@
         });
     }
 
-    public void initUser(){
-        userViewModel.initUser();
-    }
-
     public void initMeasurements(int weight, int height, int neckSize, int waistSize, int hipSize, String  gender){
         userViewModel.initMeasurements(weight, height, neckSize, waistSize, hipSize, gender);
     }
@@ -133,7 +142,6 @@
                                 fragmentLayout.setVisibility(View.VISIBLE);
                                 appName.setTextSize(36);
                             }
-//                            onClick(appName);
                         }
                     });
                 }
@@ -147,20 +155,4 @@
             startActivity(intent); //may need to bundle this classes instance of User to use in MainActivity
             finish();
     }
-
-    @Override
-    public void onClick(View v) {
-//        switch (v.getId()){
-//            case R.id.appName: // keeping for future transitions
-//                if (fragmentLayout.getVisibility() == View.VISIBLE){
-//                    fragmentLayout.setVisibility(View.GONE);
-//                    appName.setTextSize(50);
-//                } else{
-//                    progressBar.setVisibility(View.GONE);
-//                    fragmentLayout.setVisibility(View.VISIBLE);
-//                    appName.setTextSize(36);
-//                }
-//                break;
-//        }
-    }
 }
Index: app/src/main/java/com/example/workoutapp/FirebaseRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.workoutapp;\r\n\r\nimport android.app.Application;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.lifecycle.MutableLiveData;\r\n\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.OnFailureListener;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.android.material.snackbar.Snackbar;\r\nimport com.google.firebase.auth.AuthResult;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.database.ChildEventListener;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Locale;\r\nimport java.util.Objects;\r\nimport java.util.Calendar;\r\nimport java.text.DateFormat;\r\n\r\nimport static java.lang.Double.isNaN;\r\n\r\npublic class FirebaseRepository {\r\n\r\n    private Application application;\r\n    private FirebaseAuth firebaseAuth;\r\n    private FirebaseUser firebaseUser;\r\n    private DatabaseReference database;\r\n    private MutableLiveData<FirebaseUser> userMutableLiveData;\r\n    private MutableLiveData<FirebaseUser> registerUserLiveData;\r\n    private MutableLiveData<Integer> dailyPoints;\r\n    private MutableLiveData<Integer> weeklyPoints;\r\n    private MutableLiveData<Integer> lifetimePoints;\r\n    private MutableLiveData<Integer> mutableWeight;\r\n    private MutableLiveData<Integer> mutableHeight;\r\n    private MutableLiveData<Integer> mutableNeckSize;\r\n    private MutableLiveData<Integer> mutableWaistSize;\r\n    private MutableLiveData<Integer> mutableHipSize;\r\n    public MutableLiveData<Double> mutableBodyFat;\r\n    public MutableLiveData<String> mutableGender;\r\n    private MutableLiveData<String> mutableBirthday;\r\n    private MutableLiveData<ArrayList<Friend>> friends;\r\n    private Calendar calendar;\r\n    private SimpleDateFormat sdf;\r\n    private String dateString;\r\n    private ArrayList<Friend> friendsArray;\r\n\r\n    public FirebaseRepository(Application application){\r\n        friendsArray = new ArrayList<>();\r\n        calendar = Calendar.getInstance();\r\n        sdf = new SimpleDateFormat(\"MM-dd-yyyy\", Locale.US);\r\n        dateString = sdf.format(calendar.getTime());\r\n        this.application = application;\r\n        firebaseAuth = FirebaseAuth.getInstance();\r\n        database = FirebaseDatabase.getInstance().getReference();\r\n        userMutableLiveData = new MutableLiveData<>();\r\n        registerUserLiveData = new MutableLiveData<>();\r\n        dailyPoints = new MutableLiveData<>();\r\n        weeklyPoints = new MutableLiveData<>();\r\n        lifetimePoints = new MutableLiveData<>();\r\n        mutableWeight = new MutableLiveData<>();\r\n        mutableHeight = new MutableLiveData<>();\r\n        mutableNeckSize = new MutableLiveData<>();\r\n        mutableWaistSize = new MutableLiveData<>();\r\n        mutableHipSize = new MutableLiveData<>();\r\n        mutableGender = new MutableLiveData<>();\r\n        mutableBirthday = new MutableLiveData<>();\r\n        mutableBodyFat = new MutableLiveData<>();\r\n        friends = new MutableLiveData<>(friendsArray);\r\n    }\r\n\r\n    public MutableLiveData<FirebaseUser> getUserMutableLiveData() {\r\n        return userMutableLiveData;\r\n    }\r\n\r\n    public MutableLiveData<FirebaseUser> getRegisterUserLiveData() {\r\n        return registerUserLiveData;\r\n    }\r\n\r\n    public MutableLiveData<String> getMutableGender(){\r\n        return mutableGender;\r\n    }\r\n\r\n    public MutableLiveData<Integer> getDailyPoints() {\r\n        return dailyPoints;\r\n    }\r\n\r\n    public MutableLiveData<Integer> getWeeklyPoints() {\r\n        return weeklyPoints;\r\n    }\r\n\r\n    public MutableLiveData<Integer> getLifetimePoints() {\r\n        return lifetimePoints;\r\n    }\r\n\r\n    public MutableLiveData<Integer> getMutableWeight() {\r\n        return mutableWeight;\r\n    }\r\n\r\n    public MutableLiveData<Integer> getMutableHeight() {\r\n        return mutableHeight;\r\n    }\r\n\r\n    public MutableLiveData<Integer> getMutableNeckSize() {\r\n        return mutableNeckSize;\r\n    }\r\n\r\n    public MutableLiveData<Integer> getMutableWaistSize() {\r\n        return mutableWaistSize;\r\n    }\r\n\r\n    public MutableLiveData<Integer> getMutableHipSize() {\r\n        return mutableHipSize;\r\n    }\r\n\r\n    public MutableLiveData<Double> getMutableBodyFat() {\r\n        return mutableBodyFat;\r\n    }\r\n\r\n    public MutableLiveData<String> getMutableBirthday() {\r\n        return mutableBirthday;\r\n    }\r\n\r\n    public MutableLiveData<ArrayList<Friend>> getFriends() {\r\n        return friends;\r\n    }\r\n\r\n    public void initCurrentUser(){\r\n        userMutableLiveData.setValue(firebaseAuth.getCurrentUser());\r\n    }\r\n\r\n    public void register(String email, String password){ //for registering a new account only\r\n        firebaseAuth.createUserWithEmailAndPassword(email, password).addOnCompleteListener(application.getMainExecutor(), new OnCompleteListener<AuthResult>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<AuthResult> task) { //new account created\r\n                registerUserLiveData.setValue(firebaseAuth.getCurrentUser());\r\n                initPoints();\r\n            }\r\n        });\r\n    }\r\n\r\n    public void signIn(final String username, final String password){\r\n        firebaseAuth.signInWithEmailAndPassword(username, password).addOnCompleteListener(application.getMainExecutor(), new OnCompleteListener<AuthResult>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<AuthResult> task) {\r\n                userMutableLiveData.setValue(firebaseAuth.getCurrentUser());\r\n            }\r\n        });\r\n    }\r\n\r\n    public void initPoints(){ //for registering a new account only\r\n        HashMap<String, Object> map = new HashMap<>();\r\n        map.put(\"dailyPoints\", 0);\r\n        map.put(\"weeklyPoints\", 0);\r\n        map.put(\"lifetimePoints\", 0);\r\n        database.child(\"Users\").child(registerUserLiveData.getValue().getUid()).child(\"points\").setValue(map).addOnSuccessListener(new OnSuccessListener<Void>() {\r\n            @Override\r\n            public void onSuccess(Void aVoid) {\r\n                dailyPoints.setValue(0);\r\n                weeklyPoints.setValue(0);\r\n                lifetimePoints.setValue(0);\r\n            }\r\n        }).addOnFailureListener(new OnFailureListener() {\r\n            @Override\r\n            public void onFailure(@NonNull Exception e) {\r\n            }\r\n        });\r\n    }\r\n\r\n    public void initMeasurements(int weight, int height, int neckSize, int waistSize, int hipSize, String gender){ //for registering a new account only\r\n        DecimalFormat df = new DecimalFormat(\"####0.00\");\r\n        double bodyFat;\r\n        if(gender.equals(\"Female\")){\r\n            bodyFat = 163.205 * Math.log10(waistSize + hipSize - neckSize) - 97.684 * Math.log10(height) + 36.76;\r\n        }else{\r\n            bodyFat = 86.010 * Math.log10(waistSize - neckSize) - 70.041 * Math.log10(height) + 36.76;\r\n        }\r\n        if (bodyFat < 0.1 || isNaN(bodyFat)){\r\n            bodyFat = 0.1;\r\n        }\r\n        bodyFat = Double.parseDouble(df.format(bodyFat)); //reduce body fat to two decimal places\r\n        mutableBodyFat.postValue(bodyFat);\r\n        final HashMap<String, Object> map = new HashMap<>();\r\n        map.put(\"weight\", weight);\r\n        map.put(\"height\", height);\r\n        map.put(\"neckSize\", neckSize);\r\n        map.put(\"waistSize\", waistSize);\r\n        map.put(\"hipSize\", hipSize);\r\n        map.put(\"bodyFatPercent\", bodyFat);\r\n        database.child(\"Users\").child(registerUserLiveData.getValue().getUid()).child(\"measurements\").setValue(map).addOnSuccessListener(new OnSuccessListener<Void>() {\r\n            @Override\r\n            public void onSuccess(Void aVoid) {\r\n                mutableWeight.postValue((Integer) map.get(\"weight\"));\r\n                mutableHeight.postValue((Integer) map.get(\"height\"));\r\n                mutableNeckSize.postValue((Integer) map.get(\"neckSize\"));\r\n                mutableWaistSize.postValue((Integer) map.get(\"waistSize\"));\r\n                mutableHipSize.postValue((Integer) map.get(\"hipSize\"));\r\n                mutableBodyFat.setValue((Double) map.get(\"bodyFatPercent\"));\r\n                userMutableLiveData.postValue(registerUserLiveData.getValue());\r\n            }\r\n        }).addOnFailureListener(new OnFailureListener() {\r\n            @Override\r\n            public void onFailure(@NonNull Exception e) {\r\n            }\r\n        });\r\n    }\r\n\r\n    public void initDemographics(String email, String firstName, String lastName, String phoneNumber, String birthday, String gender){ //for registering a new account only\r\n        database.child(\"UsersByNumber\").child(phoneNumber).setValue(Objects.requireNonNull(registerUserLiveData.getValue()).getUid()); //adds user to UsersByNumber child\r\n        final HashMap<String, String> map = new HashMap<>();\r\n        map.put(\"email\", email);\r\n        map.put(\"firstName\", firstName);\r\n        map.put(\"lastName\", lastName);\r\n        map.put(\"phoneNumber\", phoneNumber);\r\n        map.put(\"birthday\", birthday);\r\n        map.put(\"gender\", gender);\r\n        database.child(\"Users\").child(registerUserLiveData.getValue().getUid()).child(\"demographics\").setValue(map).addOnSuccessListener(new OnSuccessListener<Void>() {\r\n            @Override\r\n            public void onSuccess(Void aVoid) {\r\n                mutableGender.postValue(map.get(\"gender\"));\r\n                mutableBirthday.postValue(map.get(\"birthday\"));\r\n            }\r\n        }).addOnFailureListener(new OnFailureListener() {\r\n            @Override\r\n            public void onFailure(@NonNull Exception e) {\r\n            }\r\n        });\r\n    }\r\n\r\n    public void initBirthday(){\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + Objects.requireNonNull(userMutableLiveData.getValue()).getUid() + \"/demographics/birthday\");\r\n        database.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) { //calculate the users age given their birthday and todays date\r\n                mutableBirthday.setValue(snapshot.getValue(String.class));\r\n            }\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n            }\r\n        });\r\n    }\r\n\r\n    public void initGender(){\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + userMutableLiveData.getValue().getUid() + \"/demographics/gender\");\r\n        database.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) { //updates the User class with the users gender and initializes body fat\r\n                mutableGender.setValue(snapshot.getValue(String.class));\r\n            }\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n            }\r\n        });\r\n    }\r\n\r\n    public void pointListener(){\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + userMutableLiveData.getValue().getUid() + \"/points\");\r\n        database.addValueEventListener(new ValueEventListener() { //sets the values for weekly points based on what is in the database\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) { //this method will run initially and again anytime data changes\r\n                dailyPoints.setValue(snapshot.child(\"dailyPoints\").getValue(int.class));\r\n                weeklyPoints.setValue(snapshot.child(\"weeklyPoints\").getValue(int.class));\r\n                lifetimePoints.setValue(snapshot.child(\"lifetimePoints\").getValue(int.class));\r\n            }\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n            }\r\n        });\r\n    }\r\n\r\n    public void measurementListener(){\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + Objects.requireNonNull(userMutableLiveData.getValue()).getUid() + \"/measurements\");\r\n        database.addValueEventListener(new ValueEventListener() { //sets the values for the users measurements based on what is in the database\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) { //this method will run initially and again anytime data changes\r\n                //not a final approach. resets all values even if just one changes. TODO: find a way to set only the value that changes, possibly a childEventListener\r\n                mutableHeight.setValue(snapshot.child(\"height\").getValue(int.class));\r\n                mutableHipSize.setValue(snapshot.child(\"hipSize\").getValue(int.class));\r\n                mutableNeckSize.setValue(snapshot.child(\"neckSize\").getValue(int.class));\r\n                mutableWaistSize.setValue(snapshot.child(\"waistSize\").getValue(int.class));\r\n                mutableWeight.setValue(snapshot.child(\"weight\").getValue(int.class));\r\n                mutableBodyFat.setValue(snapshot.child(\"bodyFatPercent\").getValue(double.class));\r\n            }\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n            }\r\n        });\r\n    }\r\n\r\n    public void populateFriendPoints(final Friend friend, String friendCode){\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + friendCode + \"/points\");\r\n        database.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                friend.setDailyPoints(snapshot.child(\"dailyPoints\").getValue(int.class));\r\n                friend.setWeeklyPoints(snapshot.child(\"weeklyPoints\").getValue(int.class));\r\n                friend.setLifetimePoints(snapshot.child(\"lifetimePoints\").getValue(int.class));\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    public void populateFriendNames(final Friend friend, String friendCode){\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + friendCode + \"/demographics/\");\r\n        database.child(\"firstName\").addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                friend.setFirstName(snapshot.getValue(String.class));\r\n                friendsArray.add(friend);\r\n                friends.setValue(friendsArray);// lets observers know the data set has changed\r\n            }\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                System.out.println(\"Friend not found\");\r\n            }\r\n        });\r\n        database.child(\"lastName\").addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                friend.setLastName(snapshot.getValue(String.class));\r\n                friends.setValue(friendsArray);\r\n            }\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                System.out.println(\"Friend not found\");\r\n            }\r\n        });\r\n    }\r\n\r\n    public void friendsListener(){\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + Objects.requireNonNull(userMutableLiveData.getValue()).getUid() + \"/friends\");\r\n        database.addChildEventListener(new ChildEventListener() {\r\n            @Override\r\n            public void onChildAdded(@NonNull DataSnapshot snapshot, @Nullable String previousChildName) {\r\n                Friend friend = new Friend(snapshot.getKey()); //creates a friend with the given uid\r\n                populateFriendNames(friend, snapshot.getKey()); //populates the friends first and last name\r\n                populateFriendPoints(friend, snapshot.getKey());\r\n            }\r\n\r\n            @Override\r\n            public void onChildChanged(@NonNull DataSnapshot snapshot, @Nullable String previousChildName) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onChildRemoved(@NonNull DataSnapshot snapshot) {\r\n                for(Friend friend : Objects.requireNonNull(getFriends().getValue())){\r\n                    if(friend.getUid().equals(snapshot.getKey())){\r\n                        getFriends().getValue().remove(friend);\r\n                        friends.postValue(friendsArray);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onChildMoved(@NonNull DataSnapshot snapshot, @Nullable String previousChildName) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                System.out.println(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    public void addFriend(String phoneNumber){\r\n        database = FirebaseDatabase.getInstance().getReference(\"UsersByNumber/\" + phoneNumber);\r\n            database.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                @Override\r\n                public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                    String newFriendUID = snapshot.getValue(String.class);\r\n                    if (newFriendUID != null && !newFriendUID.equals(Objects.requireNonNull(userMutableLiveData.getValue()).getUid())){ //someone with that phone number exists and it is not the users phone number\r\n                        boolean alreadyFriend = false;\r\n                        for(Friend friend : Objects.requireNonNull(getFriends().getValue())){\r\n                            if(friend.getUid().equals(newFriendUID)){\r\n                                alreadyFriend = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (!alreadyFriend){\r\n                            database = FirebaseDatabase.getInstance().getReference(\"Users/\" + Objects.requireNonNull(userMutableLiveData.getValue()).getUid() + \"/friends/\" + newFriendUID);\r\n                            database.setValue(true); //we could use this value as an approval for friend request\r\n                        }else {\r\n                            //TODO: communicate to user that they are already friends with the person they tried to add.\r\n                        }\r\n                    }else {\r\n                        //TODO: communicate to user that a user with that phone number does not exist or it is their own number.\r\n                    }\r\n                }\r\n                @Override\r\n                public void onCancelled(@NonNull DatabaseError error) {\r\n                    System.out.println(\"Failed to add friend. \" + error);\r\n                }\r\n            });\r\n    }\r\n\r\n    public void removeFriend(final int index){\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + Objects.requireNonNull(userMutableLiveData.getValue()).getUid() + \"/friends/\" + Objects.requireNonNull(friends.getValue()).get(index).getUid());\r\n        database.removeValue().addOnCompleteListener(new OnCompleteListener<Void>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<Void> task) {\r\n                //TODO: communicate to user that the friend was removed\r\n            }\r\n        });\r\n    }\r\n\r\n    public int updatePoints(int difficulty, int numReps){ //computes and sets the users new point value. only used after a user does an exercise\r\n        double bodyFat = getMutableBodyFat().getValue();\r\n        int points = (int) Math.round(numReps * difficulty - (difficulty * numReps * (1 - (bodyFat / 100)))); //algorithm that computes points for given exercise\r\n        int currentDaily = getDailyPoints().getValue();\r\n        int currentWeekly = getWeeklyPoints().getValue();\r\n        int currentLifetime = getLifetimePoints().getValue();\r\n        dailyPoints.setValue(currentDaily + points);\r\n        weeklyPoints.setValue(currentWeekly + points);\r\n        lifetimePoints.setValue(currentLifetime + points);\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + Objects.requireNonNull(userMutableLiveData.getValue()).getUid() + \"/points/dailyPoints\");\r\n        database.setValue(currentDaily + points);\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + userMutableLiveData.getValue().getUid() + \"/points/weeklyPoints\");\r\n        database.setValue(currentWeekly + points);\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + userMutableLiveData.getValue().getUid() + \"/points/lifetimePoints\");\r\n        database.setValue(currentLifetime + points);\r\n        return points;\r\n    }\r\n\r\n    public void updateMeasurement(String source, int measurement){ //updates the users measurement. This will only update the measurement that is changed\r\n        switch (source){\r\n            case \"height\":\r\n                mutableHeight.setValue(measurement);\r\n                break;\r\n            case \"hipSize\":\r\n                mutableHipSize.setValue(measurement);\r\n                break;\r\n            case \"neckSize\":\r\n                mutableNeckSize.setValue(measurement);\r\n                break;\r\n            case \"waistSize\":\r\n                mutableWaistSize.setValue(measurement);\r\n                break;\r\n            case \"weight\":\r\n                mutableWeight.setValue(measurement);\r\n                break;\r\n        }\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + userMutableLiveData.getValue().getUid() + \"/measurements/\" + source);\r\n        database.setValue(measurement);\r\n        updateBodyFat();\r\n    }\r\n\r\n    public void updateBodyFat(){\r\n        DecimalFormat df = new DecimalFormat(\"####0.00\");\r\n        double bodyFat;\r\n        if(getMutableGender().getValue().equals(\"Female\")){\r\n            bodyFat = 163.205 * Math.log10(getMutableWaistSize().getValue() + getMutableHipSize().getValue() - getMutableNeckSize().getValue()) - 97.684 * Math.log10(getMutableHeight().getValue()) + 36.76;\r\n        }else{\r\n            bodyFat = 86.010 * Math.log10(getMutableWaistSize().getValue() - getMutableNeckSize().getValue()) - 70.041 * Math.log10(getMutableHeight().getValue()) + 36.76;\r\n        }\r\n        if (bodyFat < 0.1 || isNaN(bodyFat)){\r\n            bodyFat = 0.1;\r\n        }\r\n        mutableBodyFat.postValue(Double.parseDouble(df.format(bodyFat)));\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + userMutableLiveData.getValue().getUid() + \"/measurements/bodyFatPercent\");\r\n        database.setValue(Double.parseDouble(df.format(bodyFat)));\r\n    }\r\n\r\n    public void updateDailyDate(){\r\n//      Creates weekly start and end date for when the points need updating.\r\n//        final Calendar calendar = Calendar.getInstance();\r\n        final String startDate = DateFormat.getDateInstance(DateFormat.FULL).format(calendar.getTime());  // Start date\r\n//        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n        try {\r\n            calendar.setTime(sdf.parse(startDate));\r\n        } catch (ParseException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n//        SimpleDateFormat sdf1 = new SimpleDateFormat(\"MM-dd-yyyy\");\r\n        final String output = sdf.format(calendar.getTime());\r\n\r\n        database.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                database = FirebaseDatabase.getInstance().getReference(\"Dates/Daily\");\r\n                database.setValue(output);\r\n\r\n//                Calendar calendar = Calendar.getInstance();\r\n\r\n                calendar.add(Calendar.DATE, 1);  // number of days to add, can also use Calendar.DAY_OF_MONTH in place of Calendar.DATE\r\n                SimpleDateFormat sdf1 = new SimpleDateFormat(\"MM-dd-yyyy\");\r\n                final String output = sdf1.format(calendar.getTime());\r\n                database = FirebaseDatabase.getInstance().getReference(\"Dates/NextDay\");\r\n                database.setValue(output);\r\n            }\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                System.out.println(\"Daily Date not updated\" + error);\r\n            }\r\n        });\r\n    }\r\n\r\n    public void updateWeeklyDate(){\r\n//      Creates weekly start and end date for when the points need updating.\r\n//        Calendar calendar = Calendar.getInstance();\r\n\r\n        final String startDate = DateFormat.getDateInstance(DateFormat.FULL).format(calendar.getTime());  // Start date\r\n//        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n        try {\r\n            calendar.setTime(sdf.parse(startDate));\r\n        } catch (ParseException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        //        advance one week\r\n        calendar.add(Calendar.DATE, 7);  // number of days to add, can also use Calendar.DAY_OF_MONTH in place of Calendar.DATE\r\n        SimpleDateFormat sdf1 = new SimpleDateFormat(\"MM-dd-yyyy\");\r\n        final String output = sdf1.format(calendar.getTime());\r\n\r\n        database.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                database = FirebaseDatabase.getInstance().getReference(\"Dates/EndOfWeek\");\r\n                database.setValue(output);\r\n            }\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                System.out.println(\"Weekly Date not updated\" + error);\r\n            }\r\n        });\r\n    }\r\n\r\n    public void checkForNewDay(){\r\n        database = FirebaseDatabase.getInstance().getReference(\"Dates/NextDay\");\r\n        database.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                String SDF = snapshot.getValue(String.class);\r\n                System.out.println(SDF);\r\n//                checks to see if the daily points need to be reset\r\n                if(SDF.equals(dateString)){\r\n                    updateDailyDate();\r\n                    database = FirebaseDatabase.getInstance().getReference(\"Users/\" + getUserMutableLiveData().getValue().getUid() + \"/points/dailyPoints\");\r\n                    database.setValue(0);\r\n                }\r\n            }\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                System.out.println(\"Weekly Date not updated\" + error);\r\n            }\r\n        });\r\n    }\r\n\r\n    public void checkWeeklyDate(){\r\n        database = FirebaseDatabase.getInstance().getReference(\"Dates/EndOfWeek\");\r\n        database.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                String SDF = snapshot.getValue(String.class);\r\n//                checks to see if the weekly points need to be reset\r\n                if(SDF.equals(dateString)){\r\n                    updateWeeklyDate();\r\n                    database = FirebaseDatabase.getInstance().getReference(\"Users/\" + getUserMutableLiveData().getValue().getUid() + \"/points/weeklyPoints\");\r\n                    database.setValue(0);\r\n                }\r\n            }\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                System.out.println(\"Weekly Date not updated\" + error);\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/workoutapp/FirebaseRepository.java	(revision 6a0c3caf26f3fa198ffd0b92ae245cdc582ec9ee)
+++ app/src/main/java/com/example/workoutapp/FirebaseRepository.java	(date 1604956609282)
@@ -586,4 +586,4 @@
         });
     }
 
-}
+}
\ No newline at end of file
Index: app/src/main/java/com/example/workoutapp/FirebaseAccessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/workoutapp/FirebaseAccessor.java	(date 1605106130386)
+++ app/src/main/java/com/example/workoutapp/FirebaseAccessor.java	(date 1605106130386)
@@ -0,0 +1,309 @@
+package com.example.workoutapp;
+
+import android.app.Application;
+import android.widget.Toast;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.lifecycle.MutableLiveData;
+
+import com.google.android.gms.tasks.OnCompleteListener;
+import com.google.android.gms.tasks.OnFailureListener;
+import com.google.android.gms.tasks.Task;
+import com.google.firebase.auth.AuthResult;
+import com.google.firebase.auth.FirebaseAuth;
+import com.google.firebase.auth.FirebaseUser;
+import com.google.firebase.database.ChildEventListener;
+import com.google.firebase.database.DataSnapshot;
+import com.google.firebase.database.DatabaseError;
+import com.google.firebase.database.DatabaseReference;
+import com.google.firebase.database.FirebaseDatabase;
+import com.google.firebase.database.ValueEventListener;
+
+import java.util.HashMap;
+
+public class FirebaseAccessor {
+
+    private final Application application;
+    private static FirebaseAccessor firebaseAccessor;
+
+    private final FirebaseAuth firebaseAuth;
+    private final DatabaseReference database;
+
+    private MutableLiveData<User> user;
+    private MutableLiveData<FirebaseUser> userInstance;
+
+    FirebaseAccessor(Application application){
+        this.application = application;
+        user = new MutableLiveData<>();
+        database = FirebaseDatabase.getInstance().getReference();
+        firebaseAuth = FirebaseAuth.getInstance();
+        userInstance = new MutableLiveData<>(firebaseAuth.getCurrentUser());
+    }
+
+    public static FirebaseAccessor getFirebaseAccessor(){
+        return firebaseAccessor;
+    }
+
+
+    //Methods only ran when registering
+
+
+    public void register(final String email, final String password, final String phoneNumber){ //for registering a new account only
+        firebaseAuth.createUserWithEmailAndPassword(email, password).addOnCompleteListener(application.getMainExecutor(), new OnCompleteListener<AuthResult>() {
+            @Override
+            public void onComplete(@NonNull Task<AuthResult> task) { //new account created
+                if(task.isSuccessful()){
+                    Toast.makeText(application.getApplicationContext(), "User created successfully.", Toast.LENGTH_LONG).show();
+                    user.setUID(firebaseAuth.getUid());
+                    initPoints(firebaseAuth.getUid());
+                    createUserByNumber(firebaseAuth.getUid(), phoneNumber);
+                    signIn(email, password);
+                }else {
+                    Toast.makeText(application.getApplicationContext(), "User already exists.", Toast.LENGTH_LONG).show();
+                }
+
+            }
+        });
+    }
+
+    public void initPoints(String userUID){ //for registering a new account only
+        user.setDailyPoints(0);
+        user.setLifetimePoints(0);
+        user.setWeeklyPoints(0);
+        HashMap<String, Object> map = new HashMap<>();
+        map.put("dailyPoints", 0);
+        map.put("weeklyPoints", 0);
+        map.put("lifetimePoints", 0);
+        database.child("Users").child(userUID).child("points").setValue(map);
+    }
+
+    public void createUserByNumber(String userUID, String phoneNumber){
+        database.child("UsersByNumber").child(phoneNumber).setValue(userUID);
+    }
+
+//    public void initMeasurements(int weight, int height, int neckSize, int waistSize, int hipSize, String gender){ //for registering a new account only
+//        user.setWeight(weight);
+//        user.setHeight(height);
+//        user.setNeckSize(neckSize);
+//        user.setWaistSize(waistSize);
+//        user.setHipSize(hipSize);
+//        DecimalFormat df = new DecimalFormat("####0.00");
+//        double bodyFat;
+//        if(gender.equals("Female")){
+//            bodyFat = 163.205 * Math.log10(waistSize + hipSize - neckSize) - 97.684 * Math.log10(height) + 36.76;
+//        }else{
+//            bodyFat = 86.010 * Math.log10(waistSize - neckSize) - 70.041 * Math.log10(height) + 36.76;
+//        }
+//        if (bodyFat < 0.1 || isNaN(bodyFat)){
+//            bodyFat = 0.1;
+//        }
+//        bodyFat = Double.parseDouble(df.format(bodyFat)); //reduce body fat to two decimal places
+//        user.setBodyFatPercent(bodyFat);
+//        final HashMap<String, Object> map = new HashMap<>();
+//        map.put("weight", weight);
+//        map.put("height", height);
+//        map.put("neckSize", neckSize);
+//        map.put("waistSize", waistSize);
+//        map.put("hipSize", hipSize);
+//        map.put("bodyFatPercent", bodyFat);
+//        database.child("Users").child(user.getUID()).child("measurements").setValue(map).addOnSuccessListener(new OnSuccessListener<Void>() {
+//            @Override
+//            public void onSuccess(Void aVoid) {
+//            }
+//        }).addOnFailureListener(new OnFailureListener() {
+//            @Override
+//            public void onFailure(@NonNull Exception e) {
+//            }
+//        });
+//    }
+
+
+    //Methods ran upon sign in
+
+    public void signIn(final String email, final String password){
+        firebaseAuth.signInWithEmailAndPassword(email, password).addOnCompleteListener(application.getMainExecutor(), new OnCompleteListener<AuthResult>() {
+            @Override
+            public void onComplete(@NonNull Task<AuthResult> task) {
+                Toast.makeText(application.getApplicationContext(), "Successfully signed in.", Toast.LENGTH_LONG).show();
+                user.setUser(firebaseAuth.getCurrentUser());
+            }
+        }).addOnFailureListener(application.getMainExecutor(), new OnFailureListener() {
+            @Override
+            public void onFailure(@NonNull Exception e) {
+                Toast.makeText(application.getApplicationContext(), "Incorrect credentials.", Toast.LENGTH_LONG).show();
+            }
+        });
+    }
+
+    public void initUser(){
+        retrieveUserDemographics(firebaseAuth.getUid());
+        pointListener(firebaseAuth.getUid());
+        measurementListener(firebaseAuth.getUid());
+        friendListener(firebaseAuth.getUid());
+    }
+
+    public void retrieveUserDemographics(String userUID){
+        database.child("Users").child(userUID).child("demographics").addListenerForSingleValueEvent(new ValueEventListener() {
+            @Override
+            public void onDataChange(@NonNull DataSnapshot snapshot) {
+                user.setBirthday(snapshot.child("birthday").getValue(String.class));
+                user.setFirstName(snapshot.child("firstName").getValue(String.class));
+                user.setGender(snapshot.child("gender").getValue(String.class));
+                user.setLastName(snapshot.child("lastName").getValue(String.class));
+                user.setPhoneNumber(snapshot.child("phoneNumber").getValue(String.class));
+            }
+
+            @Override
+            public void onCancelled(@NonNull DatabaseError error) {
+                Toast.makeText(application.getApplicationContext(), "Failed to retrieve demographics.", Toast.LENGTH_LONG).show();
+            }
+        });
+    }
+
+
+    //Listener methods
+
+
+    public void pointListener(String userUID){
+        database.child("Users").child(userUID).child("points").addValueEventListener(new ValueEventListener() {
+            @Override
+            public void onDataChange(@NonNull DataSnapshot snapshot) {
+                snapshot.getValue(User.class);
+//                user.setDailyPoints(snapshot.child("dailyPoints").getValue(int.class));
+//                user.setLifetimePoints(snapshot.child("lifetimePoints").getValue(int.class));
+//                user.setWeeklyPoints(snapshot.child("weeklyPoints").getValue(int.class));
+            }
+
+            @Override
+            public void onCancelled(@NonNull DatabaseError error) {
+                Toast.makeText(application.getApplicationContext(), "Point listener stopped.", Toast.LENGTH_LONG).show();
+            }
+        });
+    }
+
+    public void measurementListener(String userUID){
+        database.child("Users").child(userUID).child("measurements").addValueEventListener(new ValueEventListener() {
+            @Override
+            public void onDataChange(@NonNull DataSnapshot snapshot) {
+                snapshot.getValue(User.class);
+//                user.setBodyFatPercent(snapshot.child("bodyFatPercent").getValue(int.class));
+//                user.setHeight(snapshot.child("height").getValue(int.class));
+//                user.setHipSize(snapshot.child("hipSize").getValue(int.class));
+//                user.setNeckSize(snapshot.child("neckSize").getValue(int.class));
+//                user.setWaistSize(snapshot.child("waistSize").getValue(int.class));
+//                user.setWeight(snapshot.child("weight").getValue(int.class));
+            }
+
+            @Override
+            public void onCancelled(@NonNull DatabaseError error) {
+                Toast.makeText(application.getApplicationContext(), "Measurement listener stopped.", Toast.LENGTH_LONG).show();
+            }
+        });
+    }
+
+    public void friendListener(String userUID){
+        database.child("Users").child(userUID).child("friends").addChildEventListener(new ChildEventListener() {
+            @Override
+            public void onChildAdded(@NonNull DataSnapshot snapshot, @Nullable String previousChildName) {
+                user.getFriends().add(new Friend(snapshot.getKey()));
+                retrieveFriendName(snapshot.getKey());
+                friendPointListener(snapshot.getKey());
+            }
+
+            @Override
+            public void onChildChanged(@NonNull DataSnapshot snapshot, @Nullable String previousChildName) {
+
+            }
+
+            @Override
+            public void onChildRemoved(@NonNull DataSnapshot snapshot) {
+                for(Friend friend : user.getFriends()){
+                    if(friend.getUid().equals(snapshot.getKey())){
+                        user.getFriends().remove(friend);
+                    }
+                }
+            }
+
+            @Override
+            public void onChildMoved(@NonNull DataSnapshot snapshot, @Nullable String previousChildName) {
+
+            }
+
+            @Override
+            public void onCancelled(@NonNull DatabaseError error) {
+                Toast.makeText(application.getApplicationContext(), "Friend listener stopped", Toast.LENGTH_LONG).show();
+            }
+        });
+    }
+
+    public void friendPointListener(final String friendUID){
+        database.child("Users").child(friendUID).child("points").addValueEventListener(new ValueEventListener() {
+            @Override
+            public void onDataChange(@NonNull DataSnapshot snapshot) {
+                for(Friend friend : user.getFriends()){
+                    if (friend.getUid().equals(friendUID)){
+                        friend.setDailyPoints(snapshot.child("dailyPoints").getValue(int.class));
+                        friend.setLifetimePoints(snapshot.child("lifetimePoints").getValue(int.class));
+                        friend.setWeeklyPoints(snapshot.child("weeklyPoints").getValue(int.class));
+                    }
+                }
+            }
+
+            @Override
+            public void onCancelled(@NonNull DatabaseError error) {
+                Toast.makeText(application.getApplicationContext(), "Friend point listener stopped", Toast.LENGTH_LONG).show();
+            }
+        });
+    }
+
+
+    //Update values methods
+
+
+    public void updateMeasurement(String userUID, String measurement, int value){
+        database.child("Users").child(userUID).child("measurements").child(measurement).setValue(value);
+    }
+
+    public void updatePoints(String userUID, int value){
+        database.child("Users").child(userUID).child("points").child("dailyPoints").setValue(user.getDailyPoints() + value);
+        database.child("Users").child(userUID).child("points").child("lifetimePoints").setValue(user.getLifetimePoints() + value);
+        database.child("Users").child(userUID).child("points").child("weeklyPoints").setValue(user.getWeeklyPoints() + value);
+    }
+
+    public void updateBodyFat(String userUID, double bodyFat){
+        database.child("Users").child(userUID).child("measurements").child("bodyFatPercent").setValue(bodyFat);
+    }
+
+
+    //Friend related methods
+
+
+    public void addFriend(String userUID, String friendUID){
+        database.child("Users").child(userUID).child("friends").child(friendUID).setValue(true);
+    }
+
+    public void removeFriend(String userUID, String friendUID){
+        database.child("Users").child(userUID).child("friends").child(friendUID).removeValue();
+    }
+
+    public void retrieveFriendName(final String friendUID){
+        database.child("Users").child(friendUID).child("demographics").addListenerForSingleValueEvent(new ValueEventListener() {
+            @Override
+            public void onDataChange(@NonNull DataSnapshot snapshot) {
+                for(Friend friend : user.getFriends()){
+                    if (friend.getUid().equals(friendUID)){
+                        friend.setFirstName(snapshot.child("firstName").getValue(String.class));
+                        friend.setLastName(snapshot.child("lastName").getValue(String.class));
+                    }
+                }
+            }
+
+            @Override
+            public void onCancelled(@NonNull DatabaseError error) {
+
+            }
+        });
+    }
+
+}
Index: app/src/main/res/menu/bottom_nav_menu.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\r\n\r\n    <item\r\n        android:id=\"@+id/navigation_workouts\"\r\n        android:icon=\"@drawable/dumbbell\"\r\n        android:title=\"@string/title_workouts\" />\r\n\r\n    <item\r\n        android:id=\"@+id/navigation_leaderboard\"\r\n        android:icon=\"@drawable/graph\"\r\n        android:title=\"@string/title_leaderboard\" />\r\n\r\n    <item\r\n        android:id=\"@+id/navigation_notifications\"\r\n        android:icon=\"@drawable/badge\"\r\n        android:title=\"@string/title_badges\" />\r\n    <item\r\n        android:id=\"@+id/navigation_profile\"\r\n        android:icon=\"@drawable/user_icon\"\r\n        android:title=\"@string/title_profile\" />\r\n\r\n</menu>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/menu/bottom_nav_menu.xml	(revision 6a0c3caf26f3fa198ffd0b92ae245cdc582ec9ee)
+++ app/src/main/res/menu/bottom_nav_menu.xml	(date 1605028905647)
@@ -11,10 +11,10 @@
         android:icon="@drawable/graph"
         android:title="@string/title_leaderboard" />
 
-    <item
-        android:id="@+id/navigation_notifications"
-        android:icon="@drawable/badge"
-        android:title="@string/title_badges" />
+<!--    <item-->
+<!--        android:id="@+id/navigation_notifications"-->
+<!--        android:icon="@drawable/badge"-->
+<!--        android:title="@string/title_badges" />-->
     <item
         android:id="@+id/navigation_profile"
         android:icon="@drawable/user_icon"
