Index: app/src/main/java/com/example/workoutapp/FirebaseRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.workoutapp;\r\n\r\nimport android.app.Application;\r\nimport android.content.Intent;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.lifecycle.LiveData;\r\nimport androidx.lifecycle.MutableLiveData;\r\n\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.OnFailureListener;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.firebase.auth.AuthResult;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.util.HashMap;\r\nimport java.util.Objects;\r\n\r\nimport static java.lang.Double.isNaN;\r\n\r\npublic class FirebaseRepository {\r\n\r\n    private Application application;\r\n    private FirebaseAuth firebaseAuth;\r\n    private FirebaseUser firebaseUser;\r\n    private DatabaseReference database;\r\n    private MutableLiveData<FirebaseUser> userMutableLiveData;\r\n    private MutableLiveData<FirebaseUser> registerUserLiveData;\r\n    private MutableLiveData<Integer> dailyPoints;\r\n    private MutableLiveData<Integer> weeklyPoints;\r\n    private MutableLiveData<Integer> lifetimePoints;\r\n    private MutableLiveData<Integer> mutableWeight;\r\n    private MutableLiveData<Integer> mutableHeight;\r\n    private MutableLiveData<Integer> mutableNeckSize;\r\n    private MutableLiveData<Integer> mutableWaistSize;\r\n    private MutableLiveData<Integer> mutableHipSize;\r\n    public MutableLiveData<Double> mutableBodyFat;\r\n    public MutableLiveData<String> mutableGender;\r\n    private MutableLiveData<String> mutableBirthday;\r\n\r\n    public FirebaseRepository(Application application){\r\n        this.application = application;\r\n        firebaseAuth = FirebaseAuth.getInstance();\r\n        database = FirebaseDatabase.getInstance().getReference();\r\n        userMutableLiveData = new MutableLiveData<>();\r\n        registerUserLiveData = new MutableLiveData<>();\r\n        dailyPoints = new MutableLiveData<>();\r\n        weeklyPoints = new MutableLiveData<>();\r\n        lifetimePoints = new MutableLiveData<>();\r\n        mutableWeight = new MutableLiveData<>();\r\n        mutableHeight = new MutableLiveData<>();\r\n        mutableNeckSize = new MutableLiveData<>();\r\n        mutableWaistSize = new MutableLiveData<>();\r\n        mutableHipSize = new MutableLiveData<>();\r\n        mutableGender = new MutableLiveData<>();\r\n        mutableBirthday = new MutableLiveData<>();\r\n        mutableBodyFat = new MutableLiveData<>();\r\n    }\r\n\r\n    public MutableLiveData<FirebaseUser> getUserMutableLiveData() {\r\n        return userMutableLiveData;\r\n    }\r\n\r\n    public MutableLiveData<FirebaseUser> getRegisterUserLiveData() {\r\n        return registerUserLiveData;\r\n    }\r\n\r\n    public MutableLiveData<String> getMutableGender(){\r\n        return mutableGender;\r\n    }\r\n\r\n    public MutableLiveData<Integer> getDailyPoints() {\r\n        return dailyPoints;\r\n    }\r\n\r\n    public MutableLiveData<Integer> getWeeklyPoints() {\r\n        return weeklyPoints;\r\n    }\r\n\r\n    public MutableLiveData<Integer> getLifetimePoints() {\r\n        return lifetimePoints;\r\n    }\r\n\r\n    public MutableLiveData<Integer> getMutableWeight() {\r\n        return mutableWeight;\r\n    }\r\n\r\n    public MutableLiveData<Integer> getMutableHeight() {\r\n        return mutableHeight;\r\n    }\r\n\r\n    public MutableLiveData<Integer> getMutableNeckSize() {\r\n        return mutableNeckSize;\r\n    }\r\n\r\n    public MutableLiveData<Integer> getMutableWaistSize() {\r\n        return mutableWaistSize;\r\n    }\r\n\r\n    public MutableLiveData<Integer> getMutableHipSize() {\r\n        return mutableHipSize;\r\n    }\r\n\r\n    public MutableLiveData<Double> getMutableBodyFat() {\r\n        return mutableBodyFat;\r\n    }\r\n\r\n    public MutableLiveData<String> getMutableBirthday() {\r\n        return mutableBirthday;\r\n    }\r\n\r\n    public void initCurrentUser(){\r\n        userMutableLiveData.setValue(firebaseAuth.getCurrentUser());\r\n    }\r\n\r\n    public void register(String email, String password){ //for registering a new account only\r\n        firebaseAuth.createUserWithEmailAndPassword(email, password).addOnCompleteListener(application.getMainExecutor(), new OnCompleteListener<AuthResult>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<AuthResult> task) { //new account created\r\n                registerUserLiveData.setValue(firebaseAuth.getCurrentUser());\r\n            }\r\n        });\r\n    }\r\n\r\n    public void signIn(final String username, final String password){\r\n        firebaseAuth.signInWithEmailAndPassword(username, password).addOnCompleteListener(application.getMainExecutor(), new OnCompleteListener<AuthResult>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<AuthResult> task) {\r\n                userMutableLiveData.setValue(firebaseAuth.getCurrentUser());\r\n            }\r\n        });\r\n    }\r\n\r\n    public void signOut(){\r\n        firebaseAuth.signOut();\r\n    }\r\n\r\n    public void initPoints(){ //for registering a new account only\r\n        HashMap<String, Object> map = new HashMap<>();\r\n        map.put(\"dailyPoints\", 0);\r\n        map.put(\"weeklyPoints\", 0);\r\n        map.put(\"lifetimePoints\", 0);\r\n        database.child(\"Users\").child(registerUserLiveData.getValue().getUid()).child(\"points\").setValue(map).addOnSuccessListener(new OnSuccessListener<Void>() {\r\n            @Override\r\n            public void onSuccess(Void aVoid) {\r\n                dailyPoints.setValue(0);\r\n                weeklyPoints.setValue(0);\r\n                lifetimePoints.setValue(0);\r\n            }\r\n        }).addOnFailureListener(new OnFailureListener() {\r\n            @Override\r\n            public void onFailure(@NonNull Exception e) {\r\n            }\r\n        });\r\n    }\r\n\r\n    public void initMeasurements(int weight, int height, int neckSize, int waistSize, int hipSize){ //for registering a new account only\r\n        DecimalFormat df = new DecimalFormat(\"####0.00\");\r\n        double bodyFat;\r\n        if(getMutableGender().getValue().equals(\"Female\")){\r\n            bodyFat = 163.205 * Math.log10(waistSize + hipSize - neckSize) - 97.684 * Math.log10(height) + 36.76;\r\n        }else{\r\n            bodyFat = 86.010 * Math.log10(waistSize - neckSize) - 70.041 * Math.log10(height) + 36.76;\r\n        }\r\n        if (bodyFat < 0.1 || isNaN(bodyFat)){\r\n            bodyFat = 0.1;\r\n        }\r\n        mutableBodyFat.postValue(Double.parseDouble(df.format(bodyFat)));\r\n        final HashMap<String, Object> map = new HashMap<>();\r\n        map.put(\"weight\", weight);\r\n        map.put(\"height\", height);\r\n        map.put(\"neckSize\", neckSize);\r\n        map.put(\"waistSize\", waistSize);\r\n        map.put(\"hipSize\", hipSize);\r\n        map.put(\"bodyFatPercent\", bodyFat);\r\n        database.child(\"Users\").child(registerUserLiveData.getValue().getUid()).child(\"measurements\").setValue(map).addOnSuccessListener(new OnSuccessListener<Void>() {\r\n            @Override\r\n            public void onSuccess(Void aVoid) {\r\n                mutableWeight.postValue((Integer) map.get(\"weight\"));\r\n                mutableHeight.postValue((Integer) map.get(\"height\"));\r\n                mutableNeckSize.postValue((Integer) map.get(\"neckSize\"));\r\n                mutableWaistSize.postValue((Integer) map.get(\"waistSize\"));\r\n                mutableHipSize.postValue((Integer) map.get(\"hipSize\"));\r\n                mutableBodyFat.setValue((Double) map.get(\"bodyFatPercent\"));\r\n                userMutableLiveData.postValue(registerUserLiveData.getValue());\r\n            }\r\n        }).addOnFailureListener(new OnFailureListener() {\r\n            @Override\r\n            public void onFailure(@NonNull Exception e) {\r\n            }\r\n        });\r\n    }\r\n\r\n    public void initDemographics(String email, String firstName, String lastName, String phoneNumber, String birthday, String gender){ //for registering a new account only\r\n        final HashMap<String, String> map = new HashMap<>();\r\n        map.put(\"email\", email);\r\n        map.put(\"firstName\", firstName);\r\n        map.put(\"lastName\", lastName);\r\n        map.put(\"phoneNumber\", phoneNumber);\r\n        map.put(\"birthday\", birthday);\r\n        map.put(\"gender\", gender);\r\n        database.child(\"Users\").child(registerUserLiveData.getValue().getUid()).child(\"demographics\").setValue(map).addOnSuccessListener(new OnSuccessListener<Void>() {\r\n            @Override\r\n            public void onSuccess(Void aVoid) {\r\n                mutableGender.postValue(map.get(\"gender\"));\r\n                mutableBirthday.postValue(map.get(\"birthday\"));\r\n            }\r\n        }).addOnFailureListener(new OnFailureListener() {\r\n            @Override\r\n            public void onFailure(@NonNull Exception e) {\r\n            }\r\n        });\r\n    }\r\n\r\n    public void initBirthday(){\r\n        userMutableLiveData.getValue().getUid();\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + Objects.requireNonNull(userMutableLiveData.getValue()).getUid() + \"/demographics/birthday\");\r\n        database.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) { //calculate the users age given their birthday and todays date\r\n                mutableBirthday.setValue(snapshot.getValue(String.class));\r\n            }\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n            }\r\n        });\r\n    }\r\n\r\n    public void initGender(){\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + userMutableLiveData.getValue().getUid() + \"/demographics/gender\");\r\n        database.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) { //updates the User class with the users gender and initializes body fat\r\n                mutableGender.setValue(snapshot.getValue(String.class));\r\n            }\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n            }\r\n        });\r\n    }\r\n\r\n    public void pointListener(){\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + userMutableLiveData.getValue().getUid() + \"/points\");\r\n        database.addValueEventListener(new ValueEventListener() { //sets the values for weekly points based on what is in the database\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) { //this method will run initially and again anytime data changes\r\n                dailyPoints.setValue(snapshot.child(\"dailyPoints\").getValue(int.class));\r\n                weeklyPoints.setValue(snapshot.child(\"weeklyPoints\").getValue(int.class));\r\n                lifetimePoints.setValue(snapshot.child(\"lifetimePoints\").getValue(int.class));\r\n            }\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n            }\r\n        });\r\n    }\r\n\r\n    public void measurementListener(){\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + Objects.requireNonNull(userMutableLiveData.getValue()).getUid() + \"/measurements\");\r\n        database.addValueEventListener(new ValueEventListener() { //sets the values for the users measurements based on what is in the database\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) { //this method will run initially and again anytime data changes\r\n                //not a final approach. resets all values even if just one changes. TODO: find a way to set only the value that changes.\r\n                mutableHeight.setValue(snapshot.child(\"height\").getValue(int.class));\r\n                mutableHipSize.setValue(snapshot.child(\"hipSize\").getValue(int.class));\r\n                mutableNeckSize.setValue(snapshot.child(\"neckSize\").getValue(int.class));\r\n                mutableWaistSize.setValue(snapshot.child(\"waistSize\").getValue(int.class));\r\n                mutableWeight.setValue(snapshot.child(\"weight\").getValue(int.class));\r\n                mutableBodyFat.setValue(snapshot.child(\"bodyFatPercent\").getValue(double.class));\r\n            }\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n            }\r\n        });\r\n    }\r\n\r\n    public int updatePoints(int difficulty, int numReps){ //computes and sets the users new point value. only used after a user does an exercise\r\n        double bodyFat = getMutableBodyFat().getValue();\r\n        int points = (int) Math.round(numReps * difficulty - (difficulty * numReps * (1 - (bodyFat / 100)))); //algorithm that computes points for given exercise\r\n        int currentDaily = getDailyPoints().getValue();\r\n        int currentWeekly = getWeeklyPoints().getValue();\r\n        int currentLifetime = getLifetimePoints().getValue();\r\n        dailyPoints.setValue(currentDaily + points);\r\n        weeklyPoints.setValue(currentWeekly + points);\r\n        lifetimePoints.setValue(currentLifetime + points);\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + Objects.requireNonNull(userMutableLiveData.getValue()).getUid() + \"/points/dailyPoints\");\r\n        database.setValue(currentDaily + points);\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + userMutableLiveData.getValue().getUid() + \"/points/weeklyPoints\");\r\n        database.setValue(currentWeekly + points);\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + userMutableLiveData.getValue().getUid() + \"/points/lifetimePoints\");\r\n        database.setValue(currentLifetime + points);\r\n        return points;\r\n    }\r\n\r\n    public void updateMeasurement(String source, int measurement){ //updates the users measurement. This will only update the measurement that is changed\r\n        switch (source){\r\n            case \"height\":\r\n                mutableHeight.setValue(measurement);\r\n                break;\r\n            case \"hipSize\":\r\n                mutableHipSize.setValue(measurement);\r\n                break;\r\n            case \"neckSize\":\r\n                mutableNeckSize.setValue(measurement);\r\n                break;\r\n            case \"waistSize\":\r\n                mutableWaistSize.setValue(measurement);\r\n                break;\r\n            case \"weight\":\r\n                mutableWeight.setValue(measurement);\r\n                break;\r\n        }\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + userMutableLiveData.getValue().getUid() + \"/measurements/\" + source);\r\n        database.setValue(measurement);\r\n        updateBodyFat();\r\n    }\r\n\r\n    public void updateBodyFat(){\r\n        DecimalFormat df = new DecimalFormat(\"####0.00\");\r\n        double bodyFat;\r\n        if(getMutableGender().getValue().equals(\"Female\")){\r\n            bodyFat = 163.205 * Math.log10(getMutableWaistSize().getValue() + getMutableHipSize().getValue() - getMutableNeckSize().getValue()) - 97.684 * Math.log10(getMutableHeight().getValue()) + 36.76;\r\n        }else{\r\n            bodyFat = 86.010 * Math.log10(getMutableWaistSize().getValue() - getMutableNeckSize().getValue()) - 70.041 * Math.log10(getMutableHeight().getValue()) + 36.76;\r\n        }\r\n        if (bodyFat < 0.1 || isNaN(bodyFat)){\r\n            bodyFat = 0.1;\r\n        }\r\n        mutableBodyFat.postValue(Double.parseDouble(df.format(bodyFat)));\r\n        database = FirebaseDatabase.getInstance().getReference(\"Users/\" + userMutableLiveData.getValue().getUid() + \"/measurements/bodyFatPercent\");\r\n        database.setValue(Double.parseDouble(df.format(bodyFat)));\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/workoutapp/FirebaseRepository.java	(revision 7386dd9cbcf037c65290d93562dbf067d12a65fc)
+++ app/src/main/java/com/example/workoutapp/FirebaseRepository.java	(date 1604953594576)
@@ -338,4 +338,4 @@
         database.setValue(Double.parseDouble(df.format(bodyFat)));
     }
 
-}
+}
\ No newline at end of file
